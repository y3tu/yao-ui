{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/user/Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/user/Edit.vue","mtime":1579413305753},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js","mtime":1578533613779},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1578533683571}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { validMobile } from '@/utils/my-validate';\nimport Treeselect from '@riophae/vue-treeselect';\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css';\nexport default {\n  name: 'UserEdit',\n  components: {\n    Treeselect: Treeselect\n  },\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      user: this.initUser(),\n      buttonLoading: false,\n      screenWidth: 0,\n      width: this.initWidth(),\n      departments: [],\n      treeSelectNormalizer: function treeSelectNormalizer(node) {\n        if (node.children == null || node.children.length < 1) {\n          delete node.children;\n        }\n\n        return {\n          label: node.name\n        };\n      },\n      roles: [],\n      rules: {\n        username: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 4,\n          max: 10,\n          message: this.$t('rules.range4to10'),\n          trigger: 'blur'\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (!_this.user.userId) {\n              _this.$get(\"upms/user/checkUsername/\".concat(value)).then(function (r) {\n                if (!r.data) {\n                  callback(_this.$t('rules.usernameExist'));\n                } else {\n                  callback();\n                }\n              });\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        email: {\n          type: 'email',\n          message: this.$t('rules.email'),\n          trigger: 'blur'\n        },\n        mobile: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (value !== '' && !validMobile(value)) {\n              callback(_this.$t('rules.mobile'));\n            }\n\n            if (!_this.user.userId) {\n              _this.$get(\"upms/user/checkMobile/\".concat(value)).then(function (r) {\n                if (!r.data) {\n                  callback(_this.$t('rules.mobileExist'));\n                } else {\n                  callback();\n                }\n              });\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        roleId: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'change'\n        },\n        sex: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'change'\n        },\n        status: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }\n      }\n    };\n  },\n  computed: {\n    isVisible: {\n      get: function get() {\n        return this.dialogVisible;\n      },\n      set: function set() {\n        this.close();\n        this.reset();\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    this.initDepartment();\n    this.initRoles();\n\n    window.onresize = function () {\n      return function () {\n        _this2.width = _this2.initWidth();\n      }();\n    };\n  },\n  methods: {\n    initUser: function initUser() {\n      return {\n        userId: '',\n        username: '',\n        password: '1234qwer',\n        email: '',\n        mobile: '',\n        sex: '',\n        status: '1',\n        departmentId: null,\n        roleId: []\n      };\n    },\n    initWidth: function initWidth() {\n      this.screenWidth = document.body.clientWidth;\n\n      if (this.screenWidth < 991) {\n        return '90%';\n      } else if (this.screenWidth < 1400) {\n        return '45%';\n      } else {\n        return '800px';\n      }\n    },\n    initDepartment: function initDepartment() {\n      var _this3 = this;\n\n      this.$get('upms/department/tree').then(function (r) {\n        _this3.departments = r.data;\n      }).catch(function (error) {\n        console.error(error);\n\n        _this3.$message({\n          message: _this3.$t('tips.getDataFail'),\n          type: 'error'\n        });\n      });\n    },\n    initRoles: function initRoles() {\n      var _this4 = this;\n\n      this.$get('upms/role/options').then(function (r) {\n        _this4.roles = r.data;\n      }).catch(function (error) {\n        console.error(error);\n\n        _this4.$message({\n          message: _this4.$t('tips.getDataFail'),\n          type: 'error'\n        });\n      });\n    },\n    setUser: function setUser(val) {\n      this.user = _objectSpread({}, val);\n    },\n    close: function close() {\n      this.$emit('close');\n    },\n    submitForm: function submitForm() {\n      var _this5 = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          _this5.buttonLoading = true;\n\n          if (!_this5.user.userId) {\n            // create\n            var roleIdOld = _this5.user.roleId;\n            _this5.user.roleId = _this5.user.roleId.join(',');\n\n            _this5.$post('upms/user/create', _objectSpread({}, _this5.user)).then(function () {\n              _this5.buttonLoading = false;\n              _this5.isVisible = false;\n\n              _this5.$message({\n                message: _this5.$t('tips.createSuccess'),\n                type: 'success'\n              });\n\n              _this5.$emit('success');\n            }).catch(function () {\n              _this5.buttonLoading = false;\n              _this5.user.roleId = roleIdOld;\n            });\n          } else {\n            // update\n            var _roleIdOld = _this5.user.roleId;\n            _this5.user.createTime = _this5.user.modifyTime = _this5.user.lastLoginTime = null;\n\n            _this5.$put('upms/user/update', _objectSpread({}, _this5.user)).then(function () {\n              _this5.buttonLoading = false;\n              _this5.isVisible = false;\n\n              _this5.$message({\n                message: _this5.$t('tips.updateSuccess'),\n                type: 'success'\n              });\n\n              _this5.$emit('success');\n            }).catch(function () {\n              _this5.buttonLoading = false;\n              _this5.user.roleId = _roleIdOld;\n            });\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n    reset: function reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.user = this.initUser();\n    }\n  }\n};",{"version":3,"sources":["Edit.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <el-dialog\n            :title=\"title\"\n            :width=\"width\"\n            top=\"50px\"\n            :close-on-click-modal=\"false\"\n            :close-on-press-escape=\"false\"\n            :visible.sync=\"isVisible\">\n        <el-form ref=\"form\" :model=\"user\" :rules=\"rules\" label-position=\"right\" label-width=\"100px\">\n            <el-form-item :label=\"$t('table.user.username')\" prop=\"username\">\n                <el-input v-model=\"user.username\"/>\n            </el-form-item>\n            <el-form-item v-show=\"user.userId === ''\" :label=\"$t('table.user.password')\" prop=\"password\">\n                <el-tooltip class=\"item\" effect=\"dark\" :content=\"$t('tips.defaultPassword')\" placement=\"top-start\">\n                    <el-input value=\"1234qwer\" type=\"password\" readonly/>\n                </el-tooltip>\n            </el-form-item>\n            <el-form-item :label=\"$t('table.user.email')\" prop=\"email\">\n                <el-input v-model=\"user.email\"/>\n            </el-form-item>\n            <el-form-item :label=\"$t('table.user.mobile')\" prop=\"mobile\">\n                <el-input v-model=\"user.mobile\"/>\n            </el-form-item>\n            <el-form-item :label=\"$t('table.user.department')\" prop=\"departmentId\">\n                <treeselect\n                        v-model=\"user.departmentId\"\n                        :normalizer=\"treeSelectNormalizer\"\n                        :multiple=\"false\"\n                        :options=\"departments\"\n                        :clear-value-text=\"$t('common.clear')\"\n                        placeholder=\" \"\n                        style=\"width:100%\"/>\n            </el-form-item>\n            <el-form-item :label=\"$t('table.user.role')\" prop=\"roleId\">\n                <el-select v-model=\"user.roleId\" multiple value=\"\" placeholder=\"\" style=\"width:100%\">\n                    <el-option\n                            v-for=\"item in roles\"\n                            :key=\"item.roleId\"\n                            :label=\"item.roleName\"\n                            :value=\"String(item.roleId)\"/>\n                </el-select>\n            </el-form-item>\n            <el-form-item :label=\"$t('table.user.sex')\" prop=\"sex\">\n                <el-select v-model=\"user.sex\" value=\"\" placeholder=\"\" style=\"width:100%\">\n                    <el-option value=\"0\" :label=\"$t('common.sex.male') \"/>\n                    <el-option value=\"1\" :label=\"$t('common.sex.female') \"/>\n                    <el-option value=\"2\" :label=\"$t('common.sex.secret') \"/>\n                </el-select>\n            </el-form-item>\n            <el-form-item :label=\"$t('table.user.status')\" prop=\"status\">\n                <el-radio-group v-model=\"user.status\">\n                    <el-radio label=\"1\">{{ $t('common.status.valid') }}</el-radio>\n                    <el-radio label=\"0\">{{ $t('common.status.invalid') }}</el-radio>\n                </el-radio-group>\n            </el-form-item>\n        </el-form>\n        <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button type=\"warning\" plain :loading=\"buttonLoading\" @click=\"isVisible = false\">\n                {{ $t('common.cancel') }}\n            </el-button>\n            <el-button type=\"primary\" plain :loading=\"buttonLoading\" @click=\"submitForm\">\n                {{ $t('common.confirm') }}\n            </el-button>\n        </div>\n    </el-dialog>\n</template>\n<script>\n    import {validMobile} from '@/utils/my-validate'\n    import Treeselect from '@riophae/vue-treeselect'\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n\n    export default {\n        name: 'UserEdit',\n        components: {Treeselect},\n        props: {\n            dialogVisible: {\n                type: Boolean,\n                default: false\n            },\n            title: {\n                type: String,\n                default: ''\n            }\n        },\n        data() {\n            return {\n                user: this.initUser(),\n                buttonLoading: false,\n                screenWidth: 0,\n                width: this.initWidth(),\n                departments: [],\n                treeSelectNormalizer(node) {\n                    if (node.children == null || node.children.length < 1) {\n                        delete node.children\n                    }\n                    return {\n                        label: node.name\n                    }\n                },\n                roles: [],\n                rules: {\n                    username: [\n                        {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n                        {min: 4, max: 10, message: this.$t('rules.range4to10'), trigger: 'blur'},\n                        {\n                            validator: (rule, value, callback) => {\n                                if (!this.user.userId) {\n                                    this.$get(`upms/user/checkUsername/${value}`).then((r) => {\n                                        if (!r.data) {\n                                            callback(this.$t('rules.usernameExist'))\n                                        } else {\n                                            callback()\n                                        }\n                                    })\n                                } else {\n                                    callback()\n                                }\n                            }, trigger: 'blur'\n                        }\n                    ],\n                    email: {type: 'email', message: this.$t('rules.email'), trigger: 'blur'},\n                    mobile: [\n                        {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n                        {\n                            validator: (rule, value, callback) => {\n                                if (value !== '' && !validMobile(value)) {\n                                    callback(this.$t('rules.mobile'))\n                                }\n                                if (!this.user.userId) {\n                                    this.$get(`upms/user/checkMobile/${value}`).then((r) => {\n                                        if (!r.data) {\n                                            callback(this.$t('rules.mobileExist'))\n                                        } else {\n                                            callback()\n                                        }\n                                    })\n                                } else {\n                                    callback()\n                                }\n                            }, trigger: 'blur'\n                        }],\n                    roleId: {required: true, message: this.$t('rules.require'), trigger: 'change'},\n                    sex: {required: true, message: this.$t('rules.require'), trigger: 'change'},\n                    status: {required: true, message: this.$t('rules.require'), trigger: 'blur'}\n                }\n            }\n        },\n        computed: {\n            isVisible: {\n                get() {\n                    return this.dialogVisible\n                },\n                set() {\n                    this.close();\n                    this.reset()\n                }\n            }\n        },\n        mounted() {\n            this.initDepartment();\n            this.initRoles();\n            window.onresize = () => {\n                return (() => {\n                    this.width = this.initWidth()\n                })()\n            }\n        },\n        methods: {\n            initUser() {\n                return {\n                    userId: '',\n                    username: '',\n                    password: '1234qwer',\n                    email: '',\n                    mobile: '',\n                    sex: '',\n                    status: '1',\n                    departmentId: null,\n                    roleId: []\n                }\n            },\n            initWidth() {\n                this.screenWidth = document.body.clientWidth;\n                if (this.screenWidth < 991) {\n                    return '90%'\n                } else if (this.screenWidth < 1400) {\n                    return '45%'\n                } else {\n                    return '800px'\n                }\n            },\n            initDepartment() {\n                this.$get('upms/department/tree').then((r) => {\n                    this.departments = r.data;\n                }).catch((error) => {\n                    console.error(error);\n                    this.$message({\n                        message: this.$t('tips.getDataFail'),\n                        type: 'error'\n                    })\n                })\n            },\n            initRoles() {\n                this.$get('upms/role/options').then((r) => {\n                    this.roles = r.data\n                }).catch((error) => {\n                    console.error(error);\n                    this.$message({\n                        message: this.$t('tips.getDataFail'),\n                        type: 'error'\n                    })\n                })\n            },\n            setUser(val) {\n                this.user = {...val}\n            },\n            close() {\n                this.$emit('close')\n            },\n            submitForm() {\n                this.$refs.form.validate((valid) => {\n                    if (valid) {\n                        this.buttonLoading = true;\n                        if (!this.user.userId) {\n                            // create\n                            let roleIdOld = this.user.roleId;\n                            this.user.roleId = this.user.roleId.join(',');\n                            this.$post('upms/user/create', {...this.user}).then(() => {\n                                this.buttonLoading = false;\n                                this.isVisible = false;\n                                this.$message({\n                                    message: this.$t('tips.createSuccess'),\n                                    type: 'success'\n                                });\n                                this.$emit('success')\n                            }).catch(() => {\n                                this.buttonLoading = false;\n                                this.user.roleId = roleIdOld;\n                            });\n                        } else {\n                            // update\n                            let roleIdOld = this.user.roleId;\n                            this.user.createTime = this.user.modifyTime = this.user.lastLoginTime = null;\n                            this.$put('upms/user/update', {...this.user}).then(() => {\n                                this.buttonLoading = false;\n                                this.isVisible = false;\n                                this.$message({\n                                    message: this.$t('tips.updateSuccess'),\n                                    type: 'success'\n                                });\n                                this.$emit('success')\n                            }).catch(() => {\n                                this.buttonLoading = false;\n                                this.user.roleId = roleIdOld;\n                            });\n                        }\n                    } else {\n                        return false\n                    }\n                })\n            },\n            reset() {\n                // 先清除校验，再清除表单，不然有奇怪的bug\n                this.$refs.form.clearValidate();\n                this.$refs.form.resetFields();\n                this.user = this.initUser()\n            }\n        }\n    }\n</script>\n<style lang=\"scss\" scoped>\n</style>\n"],"sourceRoot":"src/views/model/system/user"}]}