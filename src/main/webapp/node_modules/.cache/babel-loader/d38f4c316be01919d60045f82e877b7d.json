{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/client/Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/client/Edit.vue","mtime":1578878084636},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js","mtime":1578533613779},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1578533683571}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport _objectSpread from \"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { isIntegerGreaterThanZero, validURL } from '@/utils/my-validate';\nexport default {\n  name: 'ClientEdit',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      screenWidth: 0,\n      buttonLoading: false,\n      width: this.initWidth(),\n      client: this.initClient(),\n      rules: {\n        clientId: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 20,\n          message: this.$t('rules.range3to20'),\n          trigger: 'blur'\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (_this.type === 'add') {\n              _this.$get(\"auth/client/check/\".concat(value)).then(function (r) {\n                if (!r.data) {\n                  callback(_this.$t('rules.clientIdExist'));\n                } else {\n                  callback();\n                }\n              });\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        scope: [{\n          max: 100,\n          message: this.$t('rules.noMoreThan100'),\n          trigger: 'blur'\n        }, {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }],\n        webServerRedirectUri: {\n          validator: function validator(rule, value, callback) {\n            if (value !== '' && value != null && !validURL(value)) {\n              callback(new Error(_this.$t('rules.invalidURL')));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        },\n        clientSecret: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 6,\n          max: 20,\n          message: this.$t('rules.range6to20'),\n          trigger: 'blur'\n        }],\n        accessTokenValidity: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (!isIntegerGreaterThanZero(value)) {\n              callback(new Error(_this.$t('rules.invalidInteger')));\n            } else if (value.toString().length > 11) {\n              callback(new Error(_this.$t('rules.noMoreThan11')));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        refreshTokenValidity: [{\n          validator: function validator(rule, value, callback) {\n            if (value === null || value === '') {\n              callback();\n            } else if (!isIntegerGreaterThanZero(value)) {\n              callback(new Error(_this.$t('rules.invalidInteger')));\n            } else if (value.toString().length > 11) {\n              callback(new Error(_this.$t('rules.noMoreThan11')));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        authorizedGrantTypes: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }\n      },\n      grantTypes: [{\n        type: 'refresh_token'\n      }, {\n        type: 'authorization_code'\n      }, {\n        type: 'client_credentials'\n      }, {\n        type: 'password'\n      }, {\n        type: 'implicit'\n      }]\n    };\n  },\n  computed: {\n    isVisible: {\n      get: function get() {\n        return this.dialogVisible;\n      },\n      set: function set() {\n        this.close();\n        this.reset();\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    window.onresize = function () {\n      return function () {\n        _this2.width = _this2.initWidth();\n      }();\n    };\n  },\n  methods: {\n    initWidth: function initWidth() {\n      this.screenWidth = document.body.clientWidth;\n\n      if (this.screenWidth < 991) {\n        return '90%';\n      } else if (this.screenWidth < 1400) {\n        return '45%';\n      } else {\n        return '800px';\n      }\n    },\n    initClient: function initClient() {\n      return {\n        clientId: '',\n        resourceIds: '',\n        clientSecret: '',\n        scope: '',\n        authorizedGrantTypes: '',\n        webServerRedirectUri: '',\n        accessTokenValidity: null,\n        refreshTokenValidity: null,\n        autoapprove: ''\n      };\n    },\n    setClient: function setClient(val) {\n      this.client = _objectSpread({}, val);\n      var authorizedGrantTypes = [];\n\n      if (this.client.authorizedGrantTypes && typeof this.client.authorizedGrantTypes === 'string') {\n        authorizedGrantTypes = this.client.authorizedGrantTypes.split(',');\n        this.client.authorizedGrantTypes = authorizedGrantTypes;\n      }\n\n      this.client.clientSecret = '******';\n      this.client.autoapprove = this.client.autoapprove !== null ? this.client.autoapprove + '' : '';\n    },\n    submitForm: function submitForm() {\n      var _this3 = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          _this3.buttonLoading = true;\n\n          if (_this3.type === 'add') {\n            // create\n            _this3.client.authorizedGrantTypes = _this3.client.authorizedGrantTypes.join(',');\n\n            _this3.$post('auth/client', _objectSpread({}, _this3.client)).then(function () {\n              _this3.buttonLoading = false;\n              _this3.isVisible = false;\n\n              _this3.$message({\n                message: _this3.$t('tips.createSuccess'),\n                type: 'success'\n              });\n\n              _this3.$emit('success');\n            });\n          } else {\n            // update\n            _this3.client.authorizedGrantTypes = _this3.client.authorizedGrantTypes.join(',');\n\n            _this3.$put('auth/client', _objectSpread({}, _this3.client)).then(function () {\n              _this3.buttonLoading = false;\n              _this3.isVisible = false;\n\n              _this3.$message({\n                message: _this3.$t('tips.updateSuccess'),\n                type: 'success'\n              });\n\n              _this3.$emit('success');\n            });\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n    close: function close() {\n      this.$emit('close');\n    },\n    reset: function reset() {\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.client = this.initClient();\n    }\n  }\n};",{"version":3,"sources":["Edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,SAAA,wBAAA,EAAA,QAAA,QAAA,qBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AATA,GAFA;AAgBA,EAAA,IAhBA,kBAgBA;AAAA;;AACA,WAAA;AACA,MAAA,WAAA,EAAA,CADA;AAEA,MAAA,aAAA,EAAA,KAFA;AAGA,MAAA,KAAA,EAAA,KAAA,SAAA,EAHA;AAIA,MAAA,MAAA,EAAA,KAAA,UAAA,EAJA;AAKA,MAAA,KAAA,EAAA;AACA,QAAA,QAAA,EAAA,CACA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA,KAAA,EAAA,CAAA,eAAA,CAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SADA,EAEA;AAAA,UAAA,GAAA,EAAA,CAAA;AAAA,UAAA,GAAA,EAAA,EAAA;AAAA,UAAA,OAAA,EAAA,KAAA,EAAA,CAAA,kBAAA,CAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SAFA,EAGA;AAAA,UAAA,SAAA,EAAA,mBAAA,IAAA,EAAA,KAAA,EAAA,QAAA,EAAA;AACA,gBAAA,KAAA,CAAA,IAAA,KAAA,KAAA,EAAA;AACA,cAAA,KAAA,CAAA,IAAA,6BAAA,KAAA,GAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AACA,oBAAA,CAAA,CAAA,CAAA,IAAA,EAAA;AACA,kBAAA,QAAA,CAAA,KAAA,CAAA,EAAA,CAAA,qBAAA,CAAA,CAAA;AACA,iBAFA,MAEA;AACA,kBAAA,QAAA;AACA;AACA,eANA;AAOA,aARA,MAQA;AACA,cAAA,QAAA;AACA;AACA,WAZA;AAYA,UAAA,OAAA,EAAA;AAZA,SAHA,CADA;AAkBA,QAAA,KAAA,EAAA,CACA;AAAA,UAAA,GAAA,EAAA,GAAA;AAAA,UAAA,OAAA,EAAA,KAAA,EAAA,CAAA,qBAAA,CAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SADA,EAEA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA,KAAA,EAAA,CAAA,eAAA,CAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SAFA,CAlBA;AAsBA,QAAA,oBAAA,EAAA;AAAA,UAAA,SAAA,EAAA,mBAAA,IAAA,EAAA,KAAA,EAAA,QAAA,EAAA;AACA,gBAAA,KAAA,KAAA,EAAA,IAAA,KAAA,IAAA,IAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA,EAAA;AACA,cAAA,QAAA,CAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAA,kBAAA,CAAA,CAAA,CAAA;AACA,aAFA,MAEA;AACA,cAAA,QAAA;AACA;AACA,WANA;AAMA,UAAA,OAAA,EAAA;AANA,SAtBA;AA6BA,QAAA,YAAA,EAAA,CACA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA,KAAA,EAAA,CAAA,eAAA,CAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SADA,EAEA;AAAA,UAAA,GAAA,EAAA,CAAA;AAAA,UAAA,GAAA,EAAA,EAAA;AAAA,UAAA,OAAA,EAAA,KAAA,EAAA,CAAA,kBAAA,CAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SAFA,CA7BA;AAiCA,QAAA,mBAAA,EAAA,CACA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA,KAAA,EAAA,CAAA,eAAA,CAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SADA,EAEA;AAAA,UAAA,SAAA,EAAA,mBAAA,IAAA,EAAA,KAAA,EAAA,QAAA,EAAA;AACA,gBAAA,CAAA,wBAAA,CAAA,KAAA,CAAA,EAAA;AACA,cAAA,QAAA,CAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAA,sBAAA,CAAA,CAAA,CAAA;AACA,aAFA,MAEA,IAAA,KAAA,CAAA,QAAA,GAAA,MAAA,GAAA,EAAA,EAAA;AACA,cAAA,QAAA,CAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAA,oBAAA,CAAA,CAAA,CAAA;AACA,aAFA,MAEA;AACA,cAAA,QAAA;AACA;AACA,WARA;AAQA,UAAA,OAAA,EAAA;AARA,SAFA,CAjCA;AA6CA,QAAA,oBAAA,EAAA,CACA;AAAA,UAAA,SAAA,EAAA,mBAAA,IAAA,EAAA,KAAA,EAAA,QAAA,EAAA;AACA,gBAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,EAAA,EAAA;AACA,cAAA,QAAA;AACA,aAFA,MAEA,IAAA,CAAA,wBAAA,CAAA,KAAA,CAAA,EAAA;AACA,cAAA,QAAA,CAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAA,sBAAA,CAAA,CAAA,CAAA;AACA,aAFA,MAEA,IAAA,KAAA,CAAA,QAAA,GAAA,MAAA,GAAA,EAAA,EAAA;AACA,cAAA,QAAA,CAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAA,oBAAA,CAAA,CAAA,CAAA;AACA,aAFA,MAEA;AACA,cAAA,QAAA;AACA;AACA,WAVA;AAUA,UAAA,OAAA,EAAA;AAVA,SADA,CA7CA;AA0DA,QAAA,oBAAA,EAAA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA,KAAA,EAAA,CAAA,eAAA,CAAA;AAAA,UAAA,OAAA,EAAA;AAAA;AA1DA,OALA;AAiEA,MAAA,UAAA,EAAA,CACA;AAAA,QAAA,IAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,IAAA,EAAA;AAAA,OAFA,EAGA;AAAA,QAAA,IAAA,EAAA;AAAA,OAHA,EAIA;AAAA,QAAA,IAAA,EAAA;AAAA,OAJA,EAKA;AAAA,QAAA,IAAA,EAAA;AAAA,OALA;AAjEA,KAAA;AAyEA,GA1FA;AA2FA,EAAA,QAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,GADA,iBACA;AACA,eAAA,KAAA,aAAA;AACA,OAHA;AAIA,MAAA,GAJA,iBAIA;AACA,aAAA,KAAA;AACA,aAAA,KAAA;AACA;AAPA;AADA,GA3FA;AAsGA,EAAA,OAtGA,qBAsGA;AAAA;;AACA,IAAA,MAAA,CAAA,QAAA,GAAA,YAAA;AACA,aAAA,YAAA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,MAAA,CAAA,SAAA,EAAA;AACA,OAFA,EAAA;AAGA,KAJA;AAKA,GA5GA;AA6GA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,WAAA,WAAA,GAAA,QAAA,CAAA,IAAA,CAAA,WAAA;;AACA,UAAA,KAAA,WAAA,GAAA,GAAA,EAAA;AACA,eAAA,KAAA;AACA,OAFA,MAEA,IAAA,KAAA,WAAA,GAAA,IAAA,EAAA;AACA,eAAA,KAAA;AACA,OAFA,MAEA;AACA,eAAA,OAAA;AACA;AACA,KAVA;AAWA,IAAA,UAXA,wBAWA;AACA,aAAA;AACA,QAAA,QAAA,EAAA,EADA;AAEA,QAAA,WAAA,EAAA,EAFA;AAGA,QAAA,YAAA,EAAA,EAHA;AAIA,QAAA,KAAA,EAAA,EAJA;AAKA,QAAA,oBAAA,EAAA,EALA;AAMA,QAAA,oBAAA,EAAA,EANA;AAOA,QAAA,mBAAA,EAAA,IAPA;AAQA,QAAA,oBAAA,EAAA,IARA;AASA,QAAA,WAAA,EAAA;AATA,OAAA;AAWA,KAvBA;AAwBA,IAAA,SAxBA,qBAwBA,GAxBA,EAwBA;AACA,WAAA,MAAA,qBAAA,GAAA;AACA,UAAA,oBAAA,GAAA,EAAA;;AACA,UAAA,KAAA,MAAA,CAAA,oBAAA,IAAA,OAAA,KAAA,MAAA,CAAA,oBAAA,KAAA,QAAA,EAAA;AACA,QAAA,oBAAA,GAAA,KAAA,MAAA,CAAA,oBAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,aAAA,MAAA,CAAA,oBAAA,GAAA,oBAAA;AACA;;AACA,WAAA,MAAA,CAAA,YAAA,GAAA,QAAA;AACA,WAAA,MAAA,CAAA,WAAA,GAAA,KAAA,MAAA,CAAA,WAAA,KAAA,IAAA,GAAA,KAAA,MAAA,CAAA,WAAA,GAAA,EAAA,GAAA,EAAA;AACA,KAjCA;AAkCA,IAAA,UAlCA,wBAkCA;AAAA;;AACA,WAAA,KAAA,CAAA,IAAA,CAAA,QAAA,CAAA,UAAA,KAAA,EAAA;AACA,YAAA,KAAA,EAAA;AACA,UAAA,MAAA,CAAA,aAAA,GAAA,IAAA;;AACA,cAAA,MAAA,CAAA,IAAA,KAAA,KAAA,EAAA;AACA;AACA,YAAA,MAAA,CAAA,MAAA,CAAA,oBAAA,GAAA,MAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,GAAA,CAAA;;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,aAAA,oBAAA,MAAA,CAAA,MAAA,GAAA,IAAA,CAAA,YAAA;AACA,cAAA,MAAA,CAAA,aAAA,GAAA,KAAA;AACA,cAAA,MAAA,CAAA,SAAA,GAAA,KAAA;;AACA,cAAA,MAAA,CAAA,QAAA,CAAA;AACA,gBAAA,OAAA,EAAA,MAAA,CAAA,EAAA,CAAA,oBAAA,CADA;AAEA,gBAAA,IAAA,EAAA;AAFA,eAAA;;AAIA,cAAA,MAAA,CAAA,KAAA,CAAA,SAAA;AACA,aARA;AASA,WAZA,MAYA;AACA;AACA,YAAA,MAAA,CAAA,MAAA,CAAA,oBAAA,GAAA,MAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,GAAA,CAAA;;AACA,YAAA,MAAA,CAAA,IAAA,CAAA,aAAA,oBAAA,MAAA,CAAA,MAAA,GAAA,IAAA,CAAA,YAAA;AACA,cAAA,MAAA,CAAA,aAAA,GAAA,KAAA;AACA,cAAA,MAAA,CAAA,SAAA,GAAA,KAAA;;AACA,cAAA,MAAA,CAAA,QAAA,CAAA;AACA,gBAAA,OAAA,EAAA,MAAA,CAAA,EAAA,CAAA,oBAAA,CADA;AAEA,gBAAA,IAAA,EAAA;AAFA,eAAA;;AAIA,cAAA,MAAA,CAAA,KAAA,CAAA,SAAA;AACA,aARA;AASA;AACA,SA3BA,MA2BA;AACA,iBAAA,KAAA;AACA;AACA,OA/BA;AAgCA,KAnEA;AAoEA,IAAA,KApEA,mBAoEA;AACA,WAAA,KAAA,CAAA,OAAA;AACA,KAtEA;AAuEA,IAAA,KAvEA,mBAuEA;AACA,WAAA,KAAA,CAAA,IAAA,CAAA,aAAA;AACA,WAAA,KAAA,CAAA,IAAA,CAAA,WAAA;AACA,WAAA,MAAA,GAAA,KAAA,UAAA,EAAA;AACA;AA3EA;AA7GA,CAAA","sourcesContent":["<template>\n  <el-dialog\n    :title=\"title\"\n    :width=\"width\"\n    top=\"50px\"\n    :close-on-click-modal=\"false\"\n    :close-on-press-escape=\"false\"\n    :visible.sync=\"isVisible\"\n  >\n    <el-form ref=\"form\" :model=\"client\" :rules=\"rules\" label-position=\"right\" label-width=\"165px\">\n      <el-form-item label=\"clientId\" prop=\"clientId\">\n        <el-input v-model=\"client.clientId\" :readonly=\"type === 'add' ? false : 'readonly'\" />\n      </el-form-item>\n      <el-form-item label=\"clientSecret\" prop=\"clientSecret\">\n        <el-input v-model=\"client.clientSecret\" :readonly=\"type === 'add' ? false : 'readonly'\" />\n      </el-form-item>\n      <el-form-item label=\"scope\" prop=\"scope\">\n        <el-input v-model=\"client.scope\" />\n      </el-form-item>\n      <el-form-item label=\"authorizedGrantTypes\" prop=\"authorizedGrantTypes\">\n        <el-select v-model=\"client.authorizedGrantTypes\" multiple value=\"\" placeholder=\"\" style=\"width:100%\">\n          <el-option\n            v-for=\"item in grantTypes\"\n            :key=\"item.type\"\n            :label=\"item.type\"\n            :value=\"item.type\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"webServerRedirectUri\" prop=\"webServerRedirectUri\">\n        <el-input v-model=\"client.webServerRedirectUri\" />\n      </el-form-item>\n      <el-form-item label=\"accessTokenValidity\" prop=\"accessTokenValidity\">\n        <el-input v-model=\"client.accessTokenValidity\" />\n      </el-form-item>\n      <el-form-item label=\"refreshTokenValidity\" prop=\"refreshTokenValidity\">\n        <el-input v-model=\"client.refreshTokenValidity\" />\n      </el-form-item>\n      <el-form-item label=\"autoapprove\" prop=\"autoapprove\">\n        <el-select v-model=\"client.autoapprove\" placeholder=\"\" value=\"\" style=\"width:100%\">\n          <el-option label=\"true\" value=\"1\" />\n          <el-option label=\"false\" value=\"0\" />\n        </el-select>\n      </el-form-item>\n    </el-form>\n    <div slot=\"footer\" class=\"dialog-footer\">\n      <el-button type=\"warning\" plain :loading=\"buttonLoading\" @click=\"isVisible = false\">\n        {{ $t('common.cancel') }}\n      </el-button>\n      <el-button type=\"primary\" plain :loading=\"buttonLoading\" @click=\"submitForm\">\n        {{ $t('common.confirm') }}\n      </el-button>\n    </div>\n  </el-dialog>\n</template>\n<script>\nimport { isIntegerGreaterThanZero, validURL } from '@/utils/my-validate'\n\nexport default {\n  name: 'ClientEdit',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      screenWidth: 0,\n      buttonLoading: false,\n      width: this.initWidth(),\n      client: this.initClient(),\n      rules: {\n        clientId: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { min: 3, max: 20, message: this.$t('rules.range3to20'), trigger: 'blur' },\n          { validator: (rule, value, callback) => {\n            if (this.type === 'add') {\n              this.$get(`auth/client/check/${value}`).then((r) => {\n                if (!r.data) {\n                  callback(this.$t('rules.clientIdExist'))\n                } else {\n                  callback()\n                }\n              })\n            } else {\n              callback()\n            }\n          }, trigger: 'blur' }\n        ],\n        scope: [\n          { max: 100, message: this.$t('rules.noMoreThan100'), trigger: 'blur' },\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ],\n        webServerRedirectUri: { validator: (rule, value, callback) => {\n          if (value !== '' && value != null && !validURL(value)) {\n            callback(new Error(this.$t('rules.invalidURL')))\n          } else {\n            callback()\n          }\n        }, trigger: 'blur' },\n        clientSecret: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { min: 6, max: 20, message: this.$t('rules.range6to20'), trigger: 'blur' }\n        ],\n        accessTokenValidity: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { validator: (rule, value, callback) => {\n            if (!isIntegerGreaterThanZero(value)) {\n              callback(new Error(this.$t('rules.invalidInteger')))\n            } else if (value.toString().length > 11) {\n              callback(new Error(this.$t('rules.noMoreThan11')))\n            } else {\n              callback()\n            }\n          }, trigger: 'blur' }\n        ],\n        refreshTokenValidity: [\n          { validator: (rule, value, callback) => {\n            if (value === null || value === '') {\n              callback()\n            } else if (!isIntegerGreaterThanZero(value)) {\n              callback(new Error(this.$t('rules.invalidInteger')))\n            } else if (value.toString().length > 11) {\n              callback(new Error(this.$t('rules.noMoreThan11')))\n            } else {\n              callback()\n            }\n          }, trigger: 'blur' }\n        ],\n        authorizedGrantTypes: { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n      },\n      grantTypes: [\n        { type: 'refresh_token' },\n        { type: 'authorization_code' },\n        { type: 'client_credentials' },\n        { type: 'password' },\n        { type: 'implicit' }\n      ]\n    }\n  },\n  computed: {\n    isVisible: {\n      get() {\n        return this.dialogVisible\n      },\n      set() {\n        this.close()\n        this.reset()\n      }\n    }\n  },\n  mounted() {\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth()\n      })()\n    }\n  },\n  methods: {\n    initWidth() {\n      this.screenWidth = document.body.clientWidth\n      if (this.screenWidth < 991) {\n        return '90%'\n      } else if (this.screenWidth < 1400) {\n        return '45%'\n      } else {\n        return '800px'\n      }\n    },\n    initClient() {\n      return {\n        clientId: '',\n        resourceIds: '',\n        clientSecret: '',\n        scope: '',\n        authorizedGrantTypes: '',\n        webServerRedirectUri: '',\n        accessTokenValidity: null,\n        refreshTokenValidity: null,\n        autoapprove: ''\n      }\n    },\n    setClient(val) {\n      this.client = { ...val }\n      let authorizedGrantTypes = []\n      if (this.client.authorizedGrantTypes && typeof this.client.authorizedGrantTypes === 'string') {\n        authorizedGrantTypes = this.client.authorizedGrantTypes.split(',')\n        this.client.authorizedGrantTypes = authorizedGrantTypes\n      }\n      this.client.clientSecret = '******'\n      this.client.autoapprove = this.client.autoapprove !== null ? this.client.autoapprove + '' : ''\n    },\n    submitForm() {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          this.buttonLoading = true\n          if (this.type === 'add') {\n            // create\n            this.client.authorizedGrantTypes = this.client.authorizedGrantTypes.join(',')\n            this.$post('auth/client', { ...this.client }).then(() => {\n              this.buttonLoading = false\n              this.isVisible = false\n              this.$message({\n                message: this.$t('tips.createSuccess'),\n                type: 'success'\n              })\n              this.$emit('success')\n            })\n          } else {\n            // update\n            this.client.authorizedGrantTypes = this.client.authorizedGrantTypes.join(',')\n            this.$put('auth/client', { ...this.client }).then(() => {\n              this.buttonLoading = false\n              this.isVisible = false\n              this.$message({\n                message: this.$t('tips.updateSuccess'),\n                type: 'success'\n              })\n              this.$emit('success')\n            })\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    close() {\n      this.$emit('close')\n    },\n    reset() {\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.client = this.initClient()\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/model/system/client"}]}