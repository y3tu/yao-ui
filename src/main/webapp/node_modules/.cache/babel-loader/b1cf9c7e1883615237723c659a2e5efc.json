{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/profile/components/Account.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/profile/components/Account.vue","mtime":1579772702361},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js","mtime":1578533613779},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1578533683571}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { validMobile } from '@/utils/my-validate';\nimport Treeselect from '@riophae/vue-treeselect';\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css';\nexport default {\n  components: {\n    Treeselect: Treeselect\n  },\n  props: {\n    user: {\n      type: Object,\n      default: function _default() {\n        return {\n          name: '',\n          email: ''\n        };\n      }\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      department: [],\n      treeSelectNormalizer: function treeSelectNormalizer(node) {\n        if (node.children == null || node.children.length < 1) {\n          delete node.children;\n        }\n\n        return {\n          label: node.name\n        };\n      },\n      buttonLoading: false,\n      deptName: '',\n      change: false,\n      rules: {\n        email: {\n          type: 'email',\n          message: this.$t('rules.email'),\n          trigger: 'blur'\n        },\n        mobile: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (value !== '' && !validMobile(value)) {\n              callback(_this.$t('rules.mobile'));\n            }\n\n            if (!_this.user.userId) {\n              _this.$get(\"upms/user/checkMobile/\".concat(value)).then(function (r) {\n                if (!r.data) {\n                  callback(_this.$t('rules.mobileExist'));\n                } else {\n                  callback();\n                }\n              });\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        sex: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'change'\n        },\n        description: {\n          max: 100,\n          message: this.$t('rules.noMoreThan100'),\n          trigger: 'blur'\n        }\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.initDepartment();\n  },\n  methods: {\n    submit: function submit() {\n      var _this2 = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          _this2.buttonLoading = true;\n\n          var temp = _objectSpread({}, _this2.user);\n\n          temp.lastLoginTime = temp.modifyTime = temp.createTime = null;\n\n          _this2.$put('upms/user/profile', _objectSpread({}, temp)).then(function () {\n            _this2.buttonLoading = false;\n\n            _this2.$message({\n              message: _this2.$t('tips.updateSuccess'),\n              type: 'success'\n            });\n\n            if (_this2.change) {\n              _this2.user.department = _this2.department;\n            }\n\n            _this2.$store.commit('account/setUser', _this2.user);\n          }).catch(function (err) {\n            _this2.buttonLoading = false;\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    onSelect: function onSelect(a, b) {\n      this.departmentName = a.label;\n      this.change = true;\n    },\n    initDepartment: function initDepartment() {\n      var _this3 = this;\n\n      this.$get('upms/department/tree').then(function (r) {\n        _this3.department = r.data;\n      }).catch(function (error) {\n        console.error(error);\n\n        _this3.$message({\n          message: _this3.$t('tips.getDataFail'),\n          type: 'error'\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["Account.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <el-form ref=\"form\" :model=\"user\" :rules=\"rules\" label-position=\"right\" label-width=\"80px\" class=\"form\">\n        <el-form-item :label=\"$t('table.user.email')\" prop=\"email\">\n            <el-input v-model=\"user.email\"/>\n        </el-form-item>\n        <el-form-item :label=\"$t('table.user.mobile')\" prop=\"mobile\">\n            <el-input v-model=\"user.mobile\"/>\n        </el-form-item>\n        <el-form-item :label=\"$t('table.user.department')\" prop=\"deptId\">\n            <treeselect\n                    v-model=\"user.departmentId\"\n                    :normalizer=\"treeSelectNormalizer\"\n                    :multiple=\"false\"\n                    :options=\"department\"\n                    :clear-value-text=\"$t('common.clear')\"\n                    placeholder=\" \"\n                    @select=\"onSelect\"\n            />\n        </el-form-item>\n        <el-form-item :label=\"$t('table.user.sex')\" prop=\"sex\">\n            <el-select v-model=\"user.sex\" value=\"\" placeholder=\"\">\n                <el-option value=\"0\" :label=\"$t('common.sex.male') \"/>\n                <el-option value=\"1\" :label=\"$t('common.sex.female') \"/>\n                <el-option value=\"2\" :label=\"$t('common.sex.secret') \"/>\n            </el-select>\n        </el-form-item>\n        <el-form-item :label=\"$t('table.user.desc')\" prop=\"description\">\n            <el-input v-model=\"user.description\" type=\"textarea\" rows=\"3\"/>\n        </el-form-item>\n        <el-form-item>\n            <el-button type=\"primary\" plain :loading=\"buttonLoading\" @click=\"submit\">{{ $t('common.edit') }}</el-button>\n        </el-form-item>\n    </el-form>\n</template>\n\n<script>\n    import {validMobile} from '@/utils/my-validate'\n    import Treeselect from '@riophae/vue-treeselect'\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n\n    export default {\n        components: {Treeselect},\n        props: {\n            user: {\n                type: Object,\n                default: () => {\n                    return {\n                        name: '',\n                        email: ''\n                    }\n                }\n            }\n        },\n        data() {\n            return {\n                department: [],\n                treeSelectNormalizer(node) {\n                    if (node.children == null || node.children.length < 1) {\n                        delete node.children\n                    }\n                    return {\n                        label: node.name\n                    }\n                },\n                buttonLoading: false,\n                deptName: '',\n                change: false,\n                rules: {\n                    email: {type: 'email', message: this.$t('rules.email'), trigger: 'blur'},\n                    mobile: [\n                        {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n                        {\n                            validator: (rule, value, callback) => {\n                                if (value !== '' && !validMobile(value)) {\n                                    callback(this.$t('rules.mobile'))\n                                }\n                                if (!this.user.userId) {\n                                    this.$get(`upms/user/checkMobile/${value}`).then((r) => {\n                                        if (!r.data) {\n                                            callback(this.$t('rules.mobileExist'))\n                                        } else {\n                                            callback()\n                                        }\n                                    })\n                                } else {\n                                    callback()\n                                }\n                            }, trigger: 'blur'\n                        }],\n                    sex: {required: true, message: this.$t('rules.require'), trigger: 'change'},\n                    description: {max: 100, message: this.$t('rules.noMoreThan100'), trigger: 'blur'}\n                }\n            }\n        },\n        mounted() {\n            this.initDepartment()\n        },\n        methods: {\n            submit() {\n                this.$refs.form.validate((valid) => {\n                    if (valid) {\n                        this.buttonLoading = true;\n                        const temp = {...this.user};\n                        temp.lastLoginTime = temp.modifyTime = temp.createTime = null;\n                        this.$put('upms/user/profile', {...temp}).then(() => {\n                            this.buttonLoading = false;\n                            this.$message({\n                                message: this.$t('tips.updateSuccess'),\n                                type: 'success'\n                            });\n                            if (this.change) {\n                                this.user.department = this.department\n                            }\n                            this.$store.commit('account/setUser', this.user)\n                        }).catch(err => {\n                            this.buttonLoading = false\n                        })\n                    } else {\n                        return false\n                    }\n                })\n            },\n            onSelect(a, b) {\n                this.departmentName = a.label;\n                this.change = true\n            },\n            initDepartment() {\n                this.$get('upms/department/tree').then((r) => {\n                    this.department = r.data;\n                }).catch((error) => {\n                    console.error(error);\n                    this.$message({\n                        message: this.$t('tips.getDataFail'),\n                        type: 'error'\n                    })\n                })\n            }\n        }\n    }\n</script>\n<style lang=\"scss\" scoped>\n    .form {\n        padding: 10px 0 0 0;\n    }\n</style>\n"],"sourceRoot":"src/views/profile/components"}]}