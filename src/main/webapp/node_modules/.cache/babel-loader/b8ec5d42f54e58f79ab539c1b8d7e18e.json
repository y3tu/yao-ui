{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/user/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/user/Index.vue","mtime":1579413305754},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js","mtime":1578533613779},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1578533683571}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.regexp.search\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport page from '@/mixins/page';\nimport UserEdit from \"./Edit\";\nimport UserView from \"./View\";\nexport default {\n  name: 'UserManage',\n  mixins: [page],\n  components: {\n    UserEdit: UserEdit,\n    UserView: UserView\n  },\n  filters: {\n    sexFilter: function sexFilter(status) {\n      var map = {\n        0: 'success',\n        1: 'danger',\n        2: 'info'\n      };\n      return map[status];\n    },\n    statusFilter: function statusFilter(status) {\n      var map = {\n        0: 'danger',\n        1: 'success'\n      };\n      return map[status];\n    }\n  },\n  data: function data() {\n    return {\n      dialog: {\n        isVisible: false,\n        title: ''\n      },\n      userViewVisible: false,\n      tableKey: 0,\n      loading: false,\n      list: null,\n      total: 0,\n      sort: {},\n      selection: []\n    };\n  },\n  computed: {\n    currentUser: function currentUser() {\n      return this.$store.state.account.user;\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      _this.init();\n    });\n  },\n  mounted: function mounted() {},\n  methods: {\n    transSex: function transSex(sex) {\n      switch (sex) {\n        case '0':\n          return this.$t('common.sex.male');\n\n        case '1':\n          return this.$t('common.sex.female');\n\n        default:\n          return this.$t('common.sex.secret');\n      }\n    },\n    filterStatus: function filterStatus(value, row) {\n      return row.status === value;\n    },\n    filterSex: function filterSex(value, row) {\n      return row.sex === value;\n    },\n    viewClose: function viewClose() {\n      this.userViewVisible = false;\n    },\n    editClose: function editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess: function editSuccess() {\n      this.search();\n    },\n    onSelectChange: function onSelectChange(selection) {\n      this.selection = selection;\n    },\n    init: function init() {\n      this.findPage();\n    },\n    findPageInit: function findPageInit() {\n      this.pageUrl = 'upms/user/page';\n      return true;\n    },\n    search: function search() {\n      if (this.page.params.timeRange) {\n        this.page.params.createTimeFrom = this.page.params.timeRange[0];\n        this.page.params.createTimeTo = this.page.params.timeRange[1];\n      }\n\n      this.findPage();\n    },\n    reset: function reset() {\n      this.resetPage();\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    exportExcel: function exportExcel() {},\n    add: function add() {\n      this.dialog.title = this.$t('common.add');\n      this.dialog.isVisible = true;\n    },\n    resetPassword: function resetPassword() {\n      var _this2 = this;\n\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        });\n        return;\n      }\n\n      this.$confirm(this.$t('tips.confirmRestPassword'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(function () {\n        var userNames = [];\n\n        _this2.selection.forEach(function (u) {\n          userNames.push(u.username);\n        });\n\n        _this2.$put('upms/user/password/reset', {\n          usernames: userNames.join(',')\n        }).then(function () {\n          _this2.$message({\n            message: _this2.$t('tips.resetPasswordSuccess'),\n            type: 'success'\n          });\n\n          _this2.clearSelections();\n        });\n      }).catch(function () {\n        _this2.clearSelections();\n      });\n    },\n    singleDelete: function singleDelete(row) {\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete: function batchDelete() {\n      var _this3 = this;\n\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        });\n        return;\n      }\n\n      var contain = false;\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(function () {\n        var userIds = [];\n\n        _this3.selection.forEach(function (u) {\n          if (u.userId === _this3.currentUser.userId) {\n            contain = true;\n            return;\n          }\n\n          userIds.push(u.userId);\n        });\n\n        if (contain) {\n          _this3.$message({\n            message: _this3.$t('tips.containCurrentUser'),\n            type: 'warning'\n          });\n\n          _this3.clearSelections();\n        } else {\n          _this3.delete(userIds);\n        }\n      }).catch(function () {\n        _this3.clearSelections();\n      });\n    },\n    clearSelections: function clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete: function _delete(userIds) {\n      var _this4 = this;\n\n      this.loading = true;\n      this.$delete(\"upms/user/delByIds/\".concat(userIds)).then(function () {\n        _this4.$message({\n          message: _this4.$t('tips.deleteSuccess'),\n          type: 'success'\n        });\n\n        _this4.search();\n      });\n    },\n    view: function view(row) {\n      this.$refs.view.setUser(row);\n      this.userViewVisible = true;\n    },\n    edit: function edit(row) {\n      var roleId = [];\n\n      if (row.roleId && typeof row.roleId === 'string') {\n        roleId = row.roleId.split(',');\n        row.roleId = roleId;\n      }\n\n      this.$refs.edit.setUser(row);\n      this.dialog.title = this.$t('common.edit');\n      this.dialog.isVisible = true;\n    }\n  }\n};",{"version":3,"sources":["Index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"app-container\">\n        <div class=\"filter-container\">\n            <el-input v-model=\"page.entity.username\" :placeholder=\"$t('table.user.username')\" class=\"filter-item search-item\"\n                      @keyup.enter.native=\"search\"/>\n            <el-input v-model=\"page.entity.departmentName\" :placeholder=\"$t('table.user.department')\" class=\"filter-item search-item\"\n                      @keyup.enter.native=\"search\"/>\n            <el-date-picker\n                    v-model=\"page.params.timeRange\"\n                    :range-separator=\"null\"\n                    :start-placeholder=\"$t('table.user.createTime')\"\n                    value-format=\"yyyy-MM-dd\"\n                    class=\"filter-item search-item date-range-item\"\n                    type=\"daterange\"\n                    @keyup.enter.native=\"search\"/>\n            <el-button class=\"filter-item\" type=\"primary\" plain @click=\"search\">\n                {{ $t('table.search') }}\n            </el-button>\n            <el-button class=\"filter-item\" type=\"warning\" plain @click=\"reset\">\n                {{ $t('table.reset') }}\n            </el-button>\n            <el-dropdown v-has-any-permission=\"['user:create','user:delete','user:reset','user:export']\" trigger=\"click\" class=\"filter-item\">\n                <el-button>\n                    {{ $t('table.more') }}<i class=\"el-icon-arrow-down el-icon--right\"/>\n                </el-button>\n                <el-dropdown-menu slot=\"dropdown\">\n                    <el-dropdown-item v-has-permission=\"['user:create']\" @click.native=\"add\">{{ $t('table.add') }}</el-dropdown-item>\n                    <el-dropdown-item v-has-permission=\"['user:delete']\" @click.native=\"batchDelete\">{{ $t('table.delete') }}</el-dropdown-item>\n                    <el-dropdown-item v-has-permission=\"['user:reset']\" @click.native=\"resetPassword\">{{ $t('table.resetPassword') }}</el-dropdown-item>\n                    <el-dropdown-item v-has-permission=\"['user:export']\" @click.native=\"exportExcel\">{{ $t('table.export') }}</el-dropdown-item>\n                </el-dropdown-menu>\n            </el-dropdown>\n        </div>\n\n        <el-table\n                ref=\"table\"\n                :key=\"tableKey\"\n                v-loading=\"pageLoading\"\n                :data=\"page.records\"\n                border\n                fit\n                style=\"width: 100%;\"\n                @selection-change=\"onSelectChange\"\n                @sort-change=\"sortChange\">\n            <el-table-column type=\"selection\" align=\"center\" width=\"40px\"/>\n            <el-table-column :label=\"$t('table.user.username')\" prop=\"username\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"120px\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.username }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column\n                    :label=\"$t('table.user.sex')\"\n                    :filters=\"[{ text: $t('common.sex.male'), value: '0' }, { text: $t('common.sex.female'), value: '1' }, { text: $t('common.sex.secret'), value: '2' }]\"\n                    :filter-method=\"filterSex\"\n                    class-name=\"status-col\">\n                <template slot-scope=\"{row}\">\n                    <el-tag :type=\"row.sex | sexFilter\">\n                        {{ transSex(row.sex) }}\n                    </el-tag>\n                </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('table.user.email')\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"150px\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.email }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('table.user.department')\" align=\"center\" min-width=\"100px\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.departmentName }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column\n                    :label=\"$t('table.user.status')\"\n                    :filters=\"[{ text: $t('common.status.valid'), value: '1' }, { text: $t('common.status.invalid'), value: '0' }]\"\n                    :filter-method=\"filterStatus\"\n                    class-name=\"status-col\">\n                <template slot-scope=\"{row}\">\n                    <el-tag :type=\"row.status | statusFilter\">\n                        {{ row.status === '1' ? $t('common.status.valid') : $t('common.status.invalid') }}\n                    </el-tag>\n                </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('table.user.createTime')\" prop=\"createTime\" align=\"center\" min-width=\"180px\" sortable=\"custom\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.createTime }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('table.operation')\" align=\"center\" min-width=\"150px\" class-name=\"small-padding fixed-width\">\n                <template slot-scope=\"{row}\">\n                    <i v-hasPermission=\"['user:view']\" class=\"el-icon-view table-operation\" style=\"color: #87d068;\" @click=\"view(row)\"/>\n                    <i v-hasPermission=\"['user:update']\" class=\"el-icon-setting table-operation\" style=\"color: #2db7f5;\" @click=\"edit(row)\"/>\n                    <i v-hasPermission=\"['user:delete']\" class=\"el-icon-delete table-operation\" style=\"color: #f50;\" @click=\"singleDelete(row)\"/>\n                    <el-link v-has-no-permission=\"['user:view','user:update','user:delete']\" class=\"no-perm\">\n                        {{ $t('tips.noPermission') }}\n                    </el-link>\n                </template>\n            </el-table-column>\n        </el-table>\n\n        <!--分页组件-->\n        <el-pagination\n                :total=\"page.total\"\n                :current-page=\"page.current\"\n                style=\"margin-top: 8px;\"\n                layout=\"total, sizes, prev, pager, next, jumper\"\n                @size-change=\"sizeChange\"\n                @current-change=\"pageChange\"/>\n\n        <user-edit\n                ref=\"edit\"\n                :dialog-visible=\"dialog.isVisible\"\n                :title=\"dialog.title\"\n                @success=\"editSuccess\"\n                @close=\"editClose\"/>\n        <user-view\n                ref=\"view\"\n                :dialog-visible=\"userViewVisible\"\n                @close=\"viewClose\"/>\n    </div>\n</template>\n\n<script>\n    import page from '@/mixins/page'\n\n    import UserEdit from './Edit'\n    import UserView from './View'\n\n    export default {\n        name: 'UserManage',\n        mixins: [page],\n        components: {UserEdit, UserView},\n        filters: {\n            sexFilter(status) {\n                const map = {\n                    0: 'success',\n                    1: 'danger',\n                    2: 'info'\n                };\n                return map[status]\n            },\n            statusFilter(status) {\n                const map = {\n                    0: 'danger',\n                    1: 'success'\n                };\n                return map[status]\n            }\n        },\n        data() {\n            return {\n                dialog: {\n                    isVisible: false,\n                    title: ''\n                },\n                userViewVisible: false,\n                tableKey: 0,\n                loading: false,\n                list: null,\n                total: 0,\n                sort: {},\n                selection: []\n            }\n        },\n        computed: {\n            currentUser() {\n                return this.$store.state.account.user\n            }\n        },\n        created() {\n            this.$nextTick(() => {\n                this.init()\n            })\n        },\n        mounted() {\n        },\n        methods: {\n            transSex(sex) {\n                switch (sex) {\n                    case '0':\n                        return this.$t('common.sex.male');\n                    case '1':\n                        return this.$t('common.sex.female');\n                    default:\n                        return this.$t('common.sex.secret')\n                }\n            },\n            filterStatus(value, row) {\n                return row.status === value\n            },\n            filterSex(value, row) {\n                return row.sex === value\n            },\n            viewClose() {\n                this.userViewVisible = false\n            },\n            editClose() {\n                this.dialog.isVisible = false\n            },\n            editSuccess() {\n                this.search()\n            },\n            onSelectChange(selection) {\n                this.selection = selection\n            },\n            init() {\n                this.findPage();\n            },\n            findPageInit() {\n                this.pageUrl = 'upms/user/page';\n                return true;\n            },\n            search() {\n                if (this.page.params.timeRange) {\n                    this.page.params.createTimeFrom = this.page.params.timeRange[0];\n                    this.page.params.createTimeTo = this.page.params.timeRange[1]\n                }\n                this.findPage();\n            },\n            reset() {\n                this.resetPage();\n                this.$refs.table.clearSort();\n                this.$refs.table.clearFilter();\n                this.search()\n            },\n            exportExcel() {\n\n            },\n            add() {\n                this.dialog.title = this.$t('common.add');\n                this.dialog.isVisible = true\n            },\n            resetPassword() {\n                if (!this.selection.length) {\n                    this.$message({\n                        message: this.$t('tips.noDataSelected'),\n                        type: 'warning'\n                    });\n                    return\n                }\n                this.$confirm(this.$t('tips.confirmRestPassword'), this.$t('common.tips'), {\n                    confirmButtonText: this.$t('common.confirm'),\n                    cancelButtonText: this.$t('common.cancel'),\n                    type: 'warning'\n                }).then(() => {\n                    const userNames = [];\n                    this.selection.forEach((u) => {\n                        userNames.push(u.username)\n                    });\n                    this.$put('upms/user/password/reset', {\n                        usernames: userNames.join(',')\n                    }).then(() => {\n                        this.$message({\n                            message: this.$t('tips.resetPasswordSuccess'),\n                            type: 'success'\n                        });\n                        this.clearSelections()\n                    })\n                }).catch(() => {\n                    this.clearSelections()\n                })\n            },\n            singleDelete(row) {\n                this.$refs.table.toggleRowSelection(row, true);\n                this.batchDelete()\n            },\n            batchDelete() {\n                if (!this.selection.length) {\n                    this.$message({\n                        message: this.$t('tips.noDataSelected'),\n                        type: 'warning'\n                    });\n                    return\n                }\n                let contain = false;\n                this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n                    confirmButtonText: this.$t('common.confirm'),\n                    cancelButtonText: this.$t('common.cancel'),\n                    type: 'warning'\n                }).then(() => {\n                    const userIds = [];\n                    this.selection.forEach((u) => {\n                        if (u.userId === this.currentUser.userId) {\n                            contain = true;\n                            return\n                        }\n                        userIds.push(u.userId)\n                    });\n                    if (contain) {\n                        this.$message({\n                            message: this.$t('tips.containCurrentUser'),\n                            type: 'warning'\n                        });\n                        this.clearSelections()\n                    } else {\n                        this.delete(userIds)\n                    }\n                }).catch(() => {\n                    this.clearSelections()\n                })\n            },\n            clearSelections() {\n                this.$refs.table.clearSelection()\n            },\n            delete(userIds) {\n                this.loading = true;\n                this.$delete(`upms/user/delByIds/${userIds}`).then(() => {\n                    this.$message({\n                        message: this.$t('tips.deleteSuccess'),\n                        type: 'success'\n                    });\n                    this.search()\n                })\n            },\n            view(row) {\n                this.$refs.view.setUser(row);\n                this.userViewVisible = true\n            },\n            edit(row) {\n                let roleId = [];\n                if (row.roleId && typeof row.roleId === 'string') {\n                    roleId = row.roleId.split(',');\n                    row.roleId = roleId\n                }\n                this.$refs.edit.setUser(row);\n                this.dialog.title = this.$t('common.edit');\n                this.dialog.isVisible = true\n            }\n        }\n    }\n</script>\n<style lang=\"scss\" scoped>\n</style>\n"],"sourceRoot":"src/views/model/system/user"}]}