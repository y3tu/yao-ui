{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/mixins/page.js","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/mixins/page.js","mtime":1579164364036},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js","mtime":1578533613779}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\n/**\n * 通用分页查询的实现\n */\nexport default {\n  data: function data() {\n    return {\n      pageUrl: '',\n      //数据请求地址\n      pageLoading: false,\n      //分页表格loading\n      page: {\n        records: [],\n        //表格中的数据\n        total: 0,\n        //数据总数\n        current: 1,\n        //当前页数\n        size: 10,\n        //默认每页数量\n        orders: [],\n        //升序降序字段\n        entity: {},\n        //请求实体筛选参数\n        params: {} //请求筛选参数\n\n      },\n      time: 100\n    };\n  },\n  methods: {\n    /**\n     * 后台查询分页数据\n     */\n    findPage: function () {\n      var _findPage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this = this;\n                _context.next = 3;\n                return _this.findPageInit();\n\n              case 3:\n                if (_context.sent) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this.pageLoading = true; //剔除无效参数\n\n                  Object.keys(_this.page.entity).forEach(function (key) {\n                    if (_this.page.entity[key] == null || _this.page.entity[key] === '') {\n                      delete _this.page.entity[key];\n                    }\n                  }); //剔除无效参数\n\n                  Object.keys(_this.page.params).forEach(function (key) {\n                    if (_this.page.params[key] == null || _this.page.params[key] === '') {\n                      delete _this.page.params[key];\n                    }\n                  }); //查询前先清空数据\n\n                  _this.page.records = [];\n\n                  _this.$page(_this.pageUrl, _this.page).then(function (res) {\n                    _this.page = res.data;\n                    setTimeout(function () {\n                      _this.pageLoading = false;\n                    }, _this.time);\n                    resolve(res);\n                  }).catch(function (err) {\n                    _this.pageLoading = false;\n                    reject(err);\n                  });\n                }));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function findPage() {\n        return _findPage.apply(this, arguments);\n      }\n\n      return findPage;\n    }(),\n    //查询前的准备工作 比如说对查询参数赋值或特殊处理\n    findPageInit: function findPageInit() {\n      return true;\n    },\n    //换页\n    pageChange: function pageChange(e) {\n      this.page.current = e;\n      this.findPage();\n    },\n    //改变每页显示数量\n    sizeChange: function sizeChange(e) {\n      this.page.current = 0;\n      this.page.size = e;\n      this.findPage();\n    },\n    //排序\n    sortChange: function sortChange(val) {\n      var field = val.prop;\n      var order = val.order;\n      this.page.orders = [];\n      this.page.orders = [{\n        column: field,\n        asc: order === 'ascending'\n      }];\n      this.findPage();\n    },\n    //清空查询条件\n    resetPage: function resetPage() {\n      this.page.entity = {};\n      this.page.params = {};\n      this.page.orders = [];\n    }\n  }\n};",{"version":3,"sources":["/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/mixins/page.js"],"names":["data","pageUrl","pageLoading","page","records","total","current","size","orders","entity","params","time","methods","findPage","_this","findPageInit","Promise","resolve","reject","Object","keys","forEach","key","$page","then","res","setTimeout","catch","err","pageChange","e","sizeChange","sortChange","val","field","prop","order","column","asc","resetPage"],"mappings":"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","sourcesContent":["/**\n * 通用分页查询的实现\n */\n\nexport default {\n    data() {\n        return {\n            pageUrl: '',//数据请求地址\n            pageLoading: false,//分页表格loading\n            page: {\n                records: [],//表格中的数据\n                total: 0,//数据总数\n                current: 1,//当前页数\n                size: 10,//默认每页数量\n                orders: [],//升序降序字段\n                entity: {},//请求实体筛选参数\n                params: {}//请求筛选参数\n            },\n            time: 100\n        }\n    },\n    methods: {\n        /**\n         * 后台查询分页数据\n         */\n        async findPage() {\n            const _this = this;\n            if (!await _this.findPageInit()) {\n                return\n            }\n            return new Promise((resolve, reject) => {\n                    _this.pageLoading = true;\n\n                    //剔除无效参数\n                    Object.keys(_this.page.entity).forEach(function (key) {\n                        if (_this.page.entity[key] == null || _this.page.entity[key] === '') {\n                            delete _this.page.entity[key];\n                        }\n                    });\n\n                    //剔除无效参数\n                    Object.keys(_this.page.params).forEach(function (key) {\n                        if (_this.page.params[key] == null || _this.page.params[key] === '') {\n                            delete _this.page.params[key];\n                        }\n                    });\n\n                    //查询前先清空数据\n                    _this.page.records = [];\n                    _this.$page(_this.pageUrl, _this.page).then(res => {\n                        _this.page = res.data;\n                        setTimeout(() => {\n                            _this.pageLoading = false\n                        }, _this.time);\n                        resolve(res)\n                    }).catch(err => {\n                        _this.pageLoading = false;\n                        reject(err)\n                    })\n                }\n            )\n        },\n        //查询前的准备工作 比如说对查询参数赋值或特殊处理\n        findPageInit() {\n            return true\n        },\n        //换页\n        pageChange(e) {\n            this.page.current = e;\n            this.findPage()\n        },\n        //改变每页显示数量\n        sizeChange(e) {\n            this.page.current = 0;\n            this.page.size = e;\n            this.findPage()\n        },\n        //排序\n        sortChange(val) {\n            let field = val.prop;\n            let order = val.order;\n            this.page.orders = [];\n            this.page.orders = [{\n                column: field,\n                asc: order === 'ascending'\n            }];\n            this.findPage();\n        },\n        //清空查询条件\n        resetPage() {\n            this.page.entity = {};\n            this.page.params = {};\n            this.page.orders = [];\n        }\n\n    }\n}"]}]}