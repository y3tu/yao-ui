{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/filters/index.js","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/filters/index.js","mtime":1578539937883},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js","mtime":1578533613779}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.date.now\";\n// import parseTime, formatTime and set to filter\nexport { parseTime, formatTime } from '@/utils';\n/**\n * Show plural label if time is plural number\n * @param {number} time\n * @param {string} label\n * @return {string}\n */\n\nfunction pluralize(time, label) {\n  if (time === 1) {\n    return time + label;\n  }\n\n  return time + label + 's';\n}\n/**\n * @param {number} time\n */\n\n\nexport function timeAgo(time) {\n  var between = Date.now() / 1000 - Number(time);\n\n  if (between < 3600) {\n    return pluralize(~~(between / 60), ' minute');\n  } else if (between < 86400) {\n    return pluralize(~~(between / 3600), ' hour');\n  } else {\n    return pluralize(~~(between / 86400), ' day');\n  }\n}\n/**\n * Number formatting\n * like 10000 => 10k\n * @param {number} num\n * @param {number} digits\n */\n\nexport function numberFormatter(num, digits) {\n  var si = [{\n    value: 1E18,\n    symbol: 'E'\n  }, {\n    value: 1E15,\n    symbol: 'P'\n  }, {\n    value: 1E12,\n    symbol: 'T'\n  }, {\n    value: 1E9,\n    symbol: 'G'\n  }, {\n    value: 1E6,\n    symbol: 'M'\n  }, {\n    value: 1E3,\n    symbol: 'k'\n  }];\n\n  for (var i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value + 0.1).toFixed(digits).replace(/\\.0+$|(\\.[0-9]*[1-9])0+$/, '$1') + si[i].symbol;\n    }\n  }\n\n  return num.toString();\n}\n/**\n * 10000 => \"10,000\"\n * @param {number} num\n */\n\nexport function toThousandFilter(num) {\n  return (+num || 0).toString().replace(/^-?\\d+/g, function (m) {\n    return m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ',');\n  });\n}\n/**\n * Upper case first char\n * @param {String} string\n */\n\nexport function uppercaseFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}",{"version":3,"sources":["/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/filters/index.js"],"names":["parseTime","formatTime","pluralize","time","label","timeAgo","between","Date","now","Number","numberFormatter","num","digits","si","value","symbol","i","length","toFixed","replace","toString","toThousandFilter","m","uppercaseFirst","string","charAt","toUpperCase","slice"],"mappings":";;;;;AAAA;AACA,SAAQA,SAAR,EAAmBC,UAAnB,QAAoC,SAApC;AAEA;;;;;;;AAMA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;AAC5B,MAAID,IAAI,KAAK,CAAb,EAAgB;AACZ,WAAOA,IAAI,GAAGC,KAAd;AACH;;AACD,SAAOD,IAAI,GAAGC,KAAP,GAAe,GAAtB;AACH;AAED;;;;;AAGA,OAAO,SAASC,OAAT,CAAiBF,IAAjB,EAAuB;AAC1B,MAAMG,OAAO,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAb,GAAoBC,MAAM,CAACN,IAAD,CAA1C;;AACA,MAAIG,OAAO,GAAG,IAAd,EAAoB;AAChB,WAAOJ,SAAS,CAAC,CAAC,EAAEI,OAAO,GAAG,EAAZ,CAAF,EAAmB,SAAnB,CAAhB;AACH,GAFD,MAEO,IAAIA,OAAO,GAAG,KAAd,EAAqB;AACxB,WAAOJ,SAAS,CAAC,CAAC,EAAEI,OAAO,GAAG,IAAZ,CAAF,EAAqB,OAArB,CAAhB;AACH,GAFM,MAEA;AACH,WAAOJ,SAAS,CAAC,CAAC,EAAEI,OAAO,GAAG,KAAZ,CAAF,EAAsB,MAAtB,CAAhB;AACH;AACJ;AAED;;;;;;;AAMA,OAAO,SAASI,eAAT,CAAyBC,GAAzB,EAA8BC,MAA9B,EAAsC;AACzC,MAAMC,EAAE,GAAG,CACP;AAACC,IAAAA,KAAK,EAAE,IAAR;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GADO,EAEP;AAACD,IAAAA,KAAK,EAAE,IAAR;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAFO,EAGP;AAACD,IAAAA,KAAK,EAAE,IAAR;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAHO,EAIP;AAACD,IAAAA,KAAK,EAAE,GAAR;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAJO,EAKP;AAACD,IAAAA,KAAK,EAAE,GAAR;AAAaC,IAAAA,MAAM,EAAE;AAArB,GALO,EAMP;AAACD,IAAAA,KAAK,EAAE,GAAR;AAAaC,IAAAA,MAAM,EAAE;AAArB,GANO,CAAX;;AAQA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,EAAE,CAACI,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,QAAIL,GAAG,IAAIE,EAAE,CAACG,CAAD,CAAF,CAAMF,KAAjB,EAAwB;AACpB,aAAO,CAACH,GAAG,GAAGE,EAAE,CAACG,CAAD,CAAF,CAAMF,KAAZ,GAAoB,GAArB,EAA0BI,OAA1B,CAAkCN,MAAlC,EAA0CO,OAA1C,CAAkD,0BAAlD,EAA8E,IAA9E,IAAsFN,EAAE,CAACG,CAAD,CAAF,CAAMD,MAAnG;AACH;AACJ;;AACD,SAAOJ,GAAG,CAACS,QAAJ,EAAP;AACH;AAED;;;;;AAIA,OAAO,SAASC,gBAAT,CAA0BV,GAA1B,EAA+B;AAClC,SAAO,CAAC,CAACA,GAAD,IAAQ,CAAT,EAAYS,QAAZ,GAAuBD,OAAvB,CAA+B,SAA/B,EAA0C,UAAAG,CAAC;AAAA,WAAIA,CAAC,CAACH,OAAF,CAAU,sBAAV,EAAkC,GAAlC,CAAJ;AAAA,GAA3C,CAAP;AACH;AAED;;;;;AAIA,OAAO,SAASI,cAAT,CAAwBC,MAAxB,EAAgC;AACnC,SAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAxC;AACH","sourcesContent":["// import parseTime, formatTime and set to filter\nexport {parseTime, formatTime} from '@/utils'\n\n/**\n * Show plural label if time is plural number\n * @param {number} time\n * @param {string} label\n * @return {string}\n */\nfunction pluralize(time, label) {\n    if (time === 1) {\n        return time + label\n    }\n    return time + label + 's'\n}\n\n/**\n * @param {number} time\n */\nexport function timeAgo(time) {\n    const between = Date.now() / 1000 - Number(time);\n    if (between < 3600) {\n        return pluralize(~~(between / 60), ' minute')\n    } else if (between < 86400) {\n        return pluralize(~~(between / 3600), ' hour')\n    } else {\n        return pluralize(~~(between / 86400), ' day')\n    }\n}\n\n/**\n * Number formatting\n * like 10000 => 10k\n * @param {number} num\n * @param {number} digits\n */\nexport function numberFormatter(num, digits) {\n    const si = [\n        {value: 1E18, symbol: 'E'},\n        {value: 1E15, symbol: 'P'},\n        {value: 1E12, symbol: 'T'},\n        {value: 1E9, symbol: 'G'},\n        {value: 1E6, symbol: 'M'},\n        {value: 1E3, symbol: 'k'}\n    ];\n    for (let i = 0; i < si.length; i++) {\n        if (num >= si[i].value) {\n            return (num / si[i].value + 0.1).toFixed(digits).replace(/\\.0+$|(\\.[0-9]*[1-9])0+$/, '$1') + si[i].symbol\n        }\n    }\n    return num.toString()\n}\n\n/**\n * 10000 => \"10,000\"\n * @param {number} num\n */\nexport function toThousandFilter(num) {\n    return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','))\n}\n\n/**\n * Upper case first char\n * @param {String} string\n */\nexport function uppercaseFirst(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1)\n}\n"]}]}