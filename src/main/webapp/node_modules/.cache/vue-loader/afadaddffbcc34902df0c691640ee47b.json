{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/client/Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/client/Edit.vue","mtime":1578878084636},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js","mtime":1578533613779},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1578533683571}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { isIntegerGreaterThanZero, validURL } from '@/utils/my-validate'\n\nexport default {\n  name: 'ClientEdit',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      screenWidth: 0,\n      buttonLoading: false,\n      width: this.initWidth(),\n      client: this.initClient(),\n      rules: {\n        clientId: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { min: 3, max: 20, message: this.$t('rules.range3to20'), trigger: 'blur' },\n          { validator: (rule, value, callback) => {\n            if (this.type === 'add') {\n              this.$get(`auth/client/check/${value}`).then((r) => {\n                if (!r.data) {\n                  callback(this.$t('rules.clientIdExist'))\n                } else {\n                  callback()\n                }\n              })\n            } else {\n              callback()\n            }\n          }, trigger: 'blur' }\n        ],\n        scope: [\n          { max: 100, message: this.$t('rules.noMoreThan100'), trigger: 'blur' },\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ],\n        webServerRedirectUri: { validator: (rule, value, callback) => {\n          if (value !== '' && value != null && !validURL(value)) {\n            callback(new Error(this.$t('rules.invalidURL')))\n          } else {\n            callback()\n          }\n        }, trigger: 'blur' },\n        clientSecret: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { min: 6, max: 20, message: this.$t('rules.range6to20'), trigger: 'blur' }\n        ],\n        accessTokenValidity: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { validator: (rule, value, callback) => {\n            if (!isIntegerGreaterThanZero(value)) {\n              callback(new Error(this.$t('rules.invalidInteger')))\n            } else if (value.toString().length > 11) {\n              callback(new Error(this.$t('rules.noMoreThan11')))\n            } else {\n              callback()\n            }\n          }, trigger: 'blur' }\n        ],\n        refreshTokenValidity: [\n          { validator: (rule, value, callback) => {\n            if (value === null || value === '') {\n              callback()\n            } else if (!isIntegerGreaterThanZero(value)) {\n              callback(new Error(this.$t('rules.invalidInteger')))\n            } else if (value.toString().length > 11) {\n              callback(new Error(this.$t('rules.noMoreThan11')))\n            } else {\n              callback()\n            }\n          }, trigger: 'blur' }\n        ],\n        authorizedGrantTypes: { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n      },\n      grantTypes: [\n        { type: 'refresh_token' },\n        { type: 'authorization_code' },\n        { type: 'client_credentials' },\n        { type: 'password' },\n        { type: 'implicit' }\n      ]\n    }\n  },\n  computed: {\n    isVisible: {\n      get() {\n        return this.dialogVisible\n      },\n      set() {\n        this.close()\n        this.reset()\n      }\n    }\n  },\n  mounted() {\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth()\n      })()\n    }\n  },\n  methods: {\n    initWidth() {\n      this.screenWidth = document.body.clientWidth\n      if (this.screenWidth < 991) {\n        return '90%'\n      } else if (this.screenWidth < 1400) {\n        return '45%'\n      } else {\n        return '800px'\n      }\n    },\n    initClient() {\n      return {\n        clientId: '',\n        resourceIds: '',\n        clientSecret: '',\n        scope: '',\n        authorizedGrantTypes: '',\n        webServerRedirectUri: '',\n        accessTokenValidity: null,\n        refreshTokenValidity: null,\n        autoapprove: ''\n      }\n    },\n    setClient(val) {\n      this.client = { ...val }\n      let authorizedGrantTypes = []\n      if (this.client.authorizedGrantTypes && typeof this.client.authorizedGrantTypes === 'string') {\n        authorizedGrantTypes = this.client.authorizedGrantTypes.split(',')\n        this.client.authorizedGrantTypes = authorizedGrantTypes\n      }\n      this.client.clientSecret = '******'\n      this.client.autoapprove = this.client.autoapprove !== null ? this.client.autoapprove + '' : ''\n    },\n    submitForm() {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          this.buttonLoading = true\n          if (this.type === 'add') {\n            // create\n            this.client.authorizedGrantTypes = this.client.authorizedGrantTypes.join(',')\n            this.$post('auth/client', { ...this.client }).then(() => {\n              this.buttonLoading = false\n              this.isVisible = false\n              this.$message({\n                message: this.$t('tips.createSuccess'),\n                type: 'success'\n              })\n              this.$emit('success')\n            })\n          } else {\n            // update\n            this.client.authorizedGrantTypes = this.client.authorizedGrantTypes.join(',')\n            this.$put('auth/client', { ...this.client }).then(() => {\n              this.buttonLoading = false\n              this.isVisible = false\n              this.$message({\n                message: this.$t('tips.updateSuccess'),\n                type: 'success'\n              })\n              this.$emit('success')\n            })\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    close() {\n      this.$emit('close')\n    },\n    reset() {\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.client = this.initClient()\n    }\n  }\n}\n",{"version":3,"sources":["Edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Edit.vue","sourceRoot":"src/views/model/system/client","sourcesContent":["<template>\n  <el-dialog\n    :title=\"title\"\n    :width=\"width\"\n    top=\"50px\"\n    :close-on-click-modal=\"false\"\n    :close-on-press-escape=\"false\"\n    :visible.sync=\"isVisible\"\n  >\n    <el-form ref=\"form\" :model=\"client\" :rules=\"rules\" label-position=\"right\" label-width=\"165px\">\n      <el-form-item label=\"clientId\" prop=\"clientId\">\n        <el-input v-model=\"client.clientId\" :readonly=\"type === 'add' ? false : 'readonly'\" />\n      </el-form-item>\n      <el-form-item label=\"clientSecret\" prop=\"clientSecret\">\n        <el-input v-model=\"client.clientSecret\" :readonly=\"type === 'add' ? false : 'readonly'\" />\n      </el-form-item>\n      <el-form-item label=\"scope\" prop=\"scope\">\n        <el-input v-model=\"client.scope\" />\n      </el-form-item>\n      <el-form-item label=\"authorizedGrantTypes\" prop=\"authorizedGrantTypes\">\n        <el-select v-model=\"client.authorizedGrantTypes\" multiple value=\"\" placeholder=\"\" style=\"width:100%\">\n          <el-option\n            v-for=\"item in grantTypes\"\n            :key=\"item.type\"\n            :label=\"item.type\"\n            :value=\"item.type\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"webServerRedirectUri\" prop=\"webServerRedirectUri\">\n        <el-input v-model=\"client.webServerRedirectUri\" />\n      </el-form-item>\n      <el-form-item label=\"accessTokenValidity\" prop=\"accessTokenValidity\">\n        <el-input v-model=\"client.accessTokenValidity\" />\n      </el-form-item>\n      <el-form-item label=\"refreshTokenValidity\" prop=\"refreshTokenValidity\">\n        <el-input v-model=\"client.refreshTokenValidity\" />\n      </el-form-item>\n      <el-form-item label=\"autoapprove\" prop=\"autoapprove\">\n        <el-select v-model=\"client.autoapprove\" placeholder=\"\" value=\"\" style=\"width:100%\">\n          <el-option label=\"true\" value=\"1\" />\n          <el-option label=\"false\" value=\"0\" />\n        </el-select>\n      </el-form-item>\n    </el-form>\n    <div slot=\"footer\" class=\"dialog-footer\">\n      <el-button type=\"warning\" plain :loading=\"buttonLoading\" @click=\"isVisible = false\">\n        {{ $t('common.cancel') }}\n      </el-button>\n      <el-button type=\"primary\" plain :loading=\"buttonLoading\" @click=\"submitForm\">\n        {{ $t('common.confirm') }}\n      </el-button>\n    </div>\n  </el-dialog>\n</template>\n<script>\nimport { isIntegerGreaterThanZero, validURL } from '@/utils/my-validate'\n\nexport default {\n  name: 'ClientEdit',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      screenWidth: 0,\n      buttonLoading: false,\n      width: this.initWidth(),\n      client: this.initClient(),\n      rules: {\n        clientId: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { min: 3, max: 20, message: this.$t('rules.range3to20'), trigger: 'blur' },\n          { validator: (rule, value, callback) => {\n            if (this.type === 'add') {\n              this.$get(`auth/client/check/${value}`).then((r) => {\n                if (!r.data) {\n                  callback(this.$t('rules.clientIdExist'))\n                } else {\n                  callback()\n                }\n              })\n            } else {\n              callback()\n            }\n          }, trigger: 'blur' }\n        ],\n        scope: [\n          { max: 100, message: this.$t('rules.noMoreThan100'), trigger: 'blur' },\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ],\n        webServerRedirectUri: { validator: (rule, value, callback) => {\n          if (value !== '' && value != null && !validURL(value)) {\n            callback(new Error(this.$t('rules.invalidURL')))\n          } else {\n            callback()\n          }\n        }, trigger: 'blur' },\n        clientSecret: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { min: 6, max: 20, message: this.$t('rules.range6to20'), trigger: 'blur' }\n        ],\n        accessTokenValidity: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { validator: (rule, value, callback) => {\n            if (!isIntegerGreaterThanZero(value)) {\n              callback(new Error(this.$t('rules.invalidInteger')))\n            } else if (value.toString().length > 11) {\n              callback(new Error(this.$t('rules.noMoreThan11')))\n            } else {\n              callback()\n            }\n          }, trigger: 'blur' }\n        ],\n        refreshTokenValidity: [\n          { validator: (rule, value, callback) => {\n            if (value === null || value === '') {\n              callback()\n            } else if (!isIntegerGreaterThanZero(value)) {\n              callback(new Error(this.$t('rules.invalidInteger')))\n            } else if (value.toString().length > 11) {\n              callback(new Error(this.$t('rules.noMoreThan11')))\n            } else {\n              callback()\n            }\n          }, trigger: 'blur' }\n        ],\n        authorizedGrantTypes: { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n      },\n      grantTypes: [\n        { type: 'refresh_token' },\n        { type: 'authorization_code' },\n        { type: 'client_credentials' },\n        { type: 'password' },\n        { type: 'implicit' }\n      ]\n    }\n  },\n  computed: {\n    isVisible: {\n      get() {\n        return this.dialogVisible\n      },\n      set() {\n        this.close()\n        this.reset()\n      }\n    }\n  },\n  mounted() {\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth()\n      })()\n    }\n  },\n  methods: {\n    initWidth() {\n      this.screenWidth = document.body.clientWidth\n      if (this.screenWidth < 991) {\n        return '90%'\n      } else if (this.screenWidth < 1400) {\n        return '45%'\n      } else {\n        return '800px'\n      }\n    },\n    initClient() {\n      return {\n        clientId: '',\n        resourceIds: '',\n        clientSecret: '',\n        scope: '',\n        authorizedGrantTypes: '',\n        webServerRedirectUri: '',\n        accessTokenValidity: null,\n        refreshTokenValidity: null,\n        autoapprove: ''\n      }\n    },\n    setClient(val) {\n      this.client = { ...val }\n      let authorizedGrantTypes = []\n      if (this.client.authorizedGrantTypes && typeof this.client.authorizedGrantTypes === 'string') {\n        authorizedGrantTypes = this.client.authorizedGrantTypes.split(',')\n        this.client.authorizedGrantTypes = authorizedGrantTypes\n      }\n      this.client.clientSecret = '******'\n      this.client.autoapprove = this.client.autoapprove !== null ? this.client.autoapprove + '' : ''\n    },\n    submitForm() {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          this.buttonLoading = true\n          if (this.type === 'add') {\n            // create\n            this.client.authorizedGrantTypes = this.client.authorizedGrantTypes.join(',')\n            this.$post('auth/client', { ...this.client }).then(() => {\n              this.buttonLoading = false\n              this.isVisible = false\n              this.$message({\n                message: this.$t('tips.createSuccess'),\n                type: 'success'\n              })\n              this.$emit('success')\n            })\n          } else {\n            // update\n            this.client.authorizedGrantTypes = this.client.authorizedGrantTypes.join(',')\n            this.$put('auth/client', { ...this.client }).then(() => {\n              this.buttonLoading = false\n              this.isVisible = false\n              this.$message({\n                message: this.$t('tips.updateSuccess'),\n                type: 'success'\n              })\n              this.$emit('success')\n            })\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    close() {\n      this.$emit('close')\n    },\n    reset() {\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.client = this.initClient()\n    }\n  }\n}\n</script>\n"]}]}