{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/menu/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/menu/Index.vue","mtime":1579224696914},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js","mtime":1578533613779},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1578533683571}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Icons from './Icons'\nimport Treeselect from '@riophae/vue-treeselect'\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\n\nexport default {\n    name: 'resourceManage',\n    components: {Icons, Treeselect},\n    data() {\n        return {\n            iconVisible: false,\n            buttonLoading: false,\n            selection: [],\n            resourceTree: [],\n            resourceName: '',\n            resource: this.initResource(),\n            treeProps: {\n                label: 'name',\n                children: 'children',\n            },\n            treeSelectNormalizer(node) {\n                if (node.children == null || node.children.length < 1) {\n                    delete node.children\n                }\n                return {\n                    label: node.name\n                }\n            },\n            rules: {\n                resourceName: [\n                    {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n                    {min: 2, max: 10, message: this.$t('rules.range2to10'), trigger: 'blur'}\n                ],\n                path: {max: 100, message: this.$t('rules.noMoreThan100'), trigger: 'blur'},\n                component: {max: 100, message: this.$t('rules.noMoreThan100'), trigger: 'blur'},\n                permission: {max: 50, message: this.$t('rules.noMoreThan50'), trigger: 'blur'}\n            }\n        }\n    },\n    mounted() {\n        this.initResourceTree()\n    },\n    methods: {\n        initResourceTree() {\n            this.$get('upms/resource/getResourceTree').then((r) => {\n                this.resourceTree = r.data;\n            })\n        },\n        initResource() {\n            return {\n                resourceId: '',\n                resourceName: '',\n                parentId: null,\n                path: '',\n                component: '',\n                permission: '',\n                type: 0,\n                orderNum: 0,\n                icon: ''\n            }\n        },\n        exportExcel() {\n            this.$download('upms/resource/excel', {\n                resourceName: this.resourceName\n            }, `resource_${new Date().getTime()}.xlsx`)\n        },\n        filterNode(value, data) {\n            if (!value) return true;\n            return data.name.indexOf(value) !== -1\n        },\n        nodeClick(data, node, v) {\n            this.resource.parentId = data.parentId;\n            if (this.resource.parentId === '-1') {\n                this.resource.parentId = null\n            }\n            data = data.data;\n            this.resource.orderNum = data.orderNum;\n            this.resource.type = data.type;\n            this.resource.permission = data.permission;\n            this.resource.path = data.path;\n            this.resource.component = data.component;\n            this.resource.icon = data.icon;\n            this.resource.resourceName = data.resourceName;\n            this.resource.resourceId = data.resourceId;\n            this.$refs.form.clearValidate()\n        },\n        handleNumChange(val) {\n            this.resource.orderNum = val\n        },\n        chooseIcons() {\n            this.iconVisible = true\n        },\n        chooseIcon(icon) {\n            this.resource.icon = icon;\n            this.iconVisible = false\n        },\n        submit() {\n            this.$refs.form.validate((valid) => {\n                if (valid) {\n                    this.buttonLoading = true;\n                    this.resource.createTime = this.resource.modifyTime = null;\n                    if (this.resource.resourceId) {\n                        this.$put('upms/resource/update', {...this.resource}).then(() => {\n                            this.buttonLoading = false;\n                            this.$message({\n                                message: this.$t('tips.updateSuccess'),\n                                type: 'success'\n                            });\n                            this.reset()\n                        }).catch(()=>{\n                            this.buttonLoading = false;\n                        });\n                    } else {\n                        this.$post('upms/resource/create', {...this.resource}).then(() => {\n                            this.buttonLoading = false;\n                            this.$message({\n                                message: this.$t('tips.createSuccess'),\n                                type: 'success'\n                            });\n                            this.reset()\n                        }).catch(()=>{\n                            this.buttonLoading = false;\n                        });\n                    }\n                } else {\n                    return false\n                }\n            })\n        },\n        reset() {\n            this.initResourceTree();\n            this.resourceName = '';\n            this.resetForm()\n        },\n        search() {\n            this.$refs.resourceTree.filter(this.resourceName)\n        },\n        add() {\n            this.resetForm()\n        },\n        deleteResource() {\n            const checked = this.$refs.resourceTree.getCheckedKeys();\n            if (checked.length === 0) {\n                this.$message({\n                    message: this.$t('tips.noNodeSelected'),\n                    type: 'warning'\n                })\n            } else {\n                this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\n                    confirmButtonText: this.$t('common.confirm'),\n                    cancelButtonText: this.$t('common.cancel'),\n                    type: 'warning'\n                }).then(() => {\n                    this.resource.resourceIds = checked.join(',');\n                    this.$delete(`upms/resource/delete/${this.resource.resourceIds}`).then(() => {\n                        this.$message({\n                            message: this.$t('tips.deleteSuccess'),\n                            type: 'success'\n                        });\n                        this.reset()\n                    })\n                }).catch(() => {\n                    this.$refs.resourceTree.setCheckedKeys([])\n                })\n            }\n        },\n        resetForm() {\n            this.$refs.form.clearValidate();\n            this.$refs.form.resetFields();\n            this.resource = this.initResource()\n        }\n    }\n}\n",{"version":3,"sources":["Index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Index.vue","sourceRoot":"src/views/model/system/menu","sourcesContent":["<template>\n    <div class=\"resource\">\n        <el-row :gutter=\"10\">\n            <el-col :xs=\"24\" :sm=\"12\">\n                <div class=\"app-container\">\n                    <div class=\"filter-container\">\n                        <el-input v-model=\"resourceName\" :placeholder=\"$t('table.resource.resourceName')\" class=\"filter-item search-item\"/>\n                        <el-button class=\"filter-item\" type=\"primary\" plain @click=\"search\">\n                            {{ $t('table.search') }}\n                        </el-button>\n                        <el-button class=\"filter-item\" type=\"warning\" plain @click=\"reset\">\n                            {{ $t('table.reset') }}\n                        </el-button>\n                        <el-dropdown v-has-any-permission=\"['resource:create','resource:delete','resource:export']\" trigger=\"click\" class=\"filter-item\">\n                            <el-button>\n                                {{ $t('table.more') }}<i class=\"el-icon-arrow-down el-icon--right\"/>\n                            </el-button>\n                            <el-dropdown-menu slot=\"dropdown\">\n                                <el-dropdown-item  v-has-permission=\"['resource:create']\" @click.native=\"add\">{{ $t('table.add') }}</el-dropdown-item>\n                                <el-dropdown-item  v-has-permission=\"['resource:delete']\" @click.native=\"deleteResource\">{{ $t('table.delete') }}</el-dropdown-item>\n                                <el-dropdown-item  v-has-permission=\"['resource:export']\" @click.native=\"exportExcel\">{{ $t('table.export') }}</el-dropdown-item>\n                            </el-dropdown-menu>\n                        </el-dropdown>\n                    </div>\n                    <el-tree\n                            ref=\"resourceTree\"\n                            :props=\"treeProps\"\n                            :data=\"resourceTree\"\n                            :check-strictly=\"true\"\n                            show-checkbox\n                            accordion\n                            node-key=\"id\"\n                            highlight-current\n                            :filter-node-method=\"filterNode\"\n                            @node-click=\"nodeClick\"/>\n                </div>\n            </el-col>\n            <el-col :xs=\"24\" :sm=\"12\">\n                <el-card class=\"box-card\">\n                    <div slot=\"header\" class=\"clearfix\">\n                        <span>{{ resource.resourceId === '' ? this.$t('common.add') : this.$t('common.edit') }}</span>\n                    </div>\n                    <div>\n                        <el-form ref=\"form\" :model=\"resource\" :rules=\"rules\" label-position=\"right\" label-width=\"100px\">\n                            <el-form-item :label=\"$t('table.resource.parentId')\" prop=\"parentId\">\n                                <treeselect\n                                        v-model=\"resource.parentId\"\n                                        :normalizer=\"treeSelectNormalizer\"\n                                        :multiple=\"false\"\n                                        :options=\"resourceTree\"\n                                        :clear-value-text=\"$t('common.clear')\"\n                                        placeholder=\" \"\n                                        style=\"width:100%\"/>\n                            </el-form-item>\n                            <el-form-item :label=\"$t('table.resource.resourceName')\" prop=\"resourceName\">\n                                <el-input v-model=\"resource.resourceName\"/>\n                            </el-form-item>\n                            <el-form-item :label=\"$t('table.resource.type')\" prop=\"type\">\n                                <el-radio-group v-model=\"resource.type\" :disabled=\"resource.resourceId !== ''\">\n                                    <el-radio :label=\"0\">{{ $t('common.resource.menu') }}</el-radio>\n                                    <el-radio :label=\"1\">{{ $t('common.resource.button') }}</el-radio>\n                                </el-radio-group>\n                            </el-form-item>\n                            <el-form-item v-show=\"resource.type === 0\" :label=\"$t('table.resource.icon')\" prop=\"icon\">\n                                <el-input v-model=\"resource.icon\">\n                                    <el-button slot=\"append\" icon=\"el-icon-brush\" style=\"padding-left: 0;\" @click=\"chooseIcons\"/>\n                                </el-input>\n                            </el-form-item>\n                            <el-form-item v-show=\"resource.type === 0 \" :label=\"$t('table.resource.path')\" prop=\"path\">\n                                <el-input v-model=\"resource.path\"/>\n                            </el-form-item>\n                            <el-form-item v-show=\"resource.type === 0\" :label=\"$t('table.resource.component')\" prop=\"component\">\n                                <el-input v-model=\"resource.component\"/>\n                            </el-form-item>\n                            <el-form-item :label=\"$t('table.resource.permission')\" prop=\"permission\">\n                                <el-input v-model=\"resource.permission\"/>\n                            </el-form-item>\n                            <el-form-item v-show=\"resource.type === 0\" :label=\"$t('table.resource.orderNum')\" prop=\"orderNum\">\n                                <el-input-number v-model=\"resource.orderNum\" :min=\"0\" :max=\"100\" @change=\"handleNumChange\"/>\n                            </el-form-item>\n                        </el-form>\n                    </div>\n                </el-card>\n                <el-card class=\"box-card\" style=\"margin-top: -2rem;\">\n                    <el-row>\n                        <el-col :span=\"24\" style=\"text-align: right\">\n                            <el-button type=\"primary\" plain :loading=\"buttonLoading\" @click=\"submit\">{{ resource.resourceId === '' ?\n                                this.$t('common.add') :\n                                this.$t('common.edit') }}\n                            </el-button>\n                        </el-col>\n                    </el-row>\n                </el-card>\n            </el-col>\n        </el-row>\n        <Icons\n                :dialog-visible=\"iconVisible\"\n                @close=\"iconVisible = false\"\n                @choose=\"chooseIcon\"\n        />\n    </div>\n</template>\n<script>\n    import Icons from './Icons'\n    import Treeselect from '@riophae/vue-treeselect'\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n\n    export default {\n        name: 'resourceManage',\n        components: {Icons, Treeselect},\n        data() {\n            return {\n                iconVisible: false,\n                buttonLoading: false,\n                selection: [],\n                resourceTree: [],\n                resourceName: '',\n                resource: this.initResource(),\n                treeProps: {\n                    label: 'name',\n                    children: 'children',\n                },\n                treeSelectNormalizer(node) {\n                    if (node.children == null || node.children.length < 1) {\n                        delete node.children\n                    }\n                    return {\n                        label: node.name\n                    }\n                },\n                rules: {\n                    resourceName: [\n                        {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n                        {min: 2, max: 10, message: this.$t('rules.range2to10'), trigger: 'blur'}\n                    ],\n                    path: {max: 100, message: this.$t('rules.noMoreThan100'), trigger: 'blur'},\n                    component: {max: 100, message: this.$t('rules.noMoreThan100'), trigger: 'blur'},\n                    permission: {max: 50, message: this.$t('rules.noMoreThan50'), trigger: 'blur'}\n                }\n            }\n        },\n        mounted() {\n            this.initResourceTree()\n        },\n        methods: {\n            initResourceTree() {\n                this.$get('upms/resource/getResourceTree').then((r) => {\n                    this.resourceTree = r.data;\n                })\n            },\n            initResource() {\n                return {\n                    resourceId: '',\n                    resourceName: '',\n                    parentId: null,\n                    path: '',\n                    component: '',\n                    permission: '',\n                    type: 0,\n                    orderNum: 0,\n                    icon: ''\n                }\n            },\n            exportExcel() {\n                this.$download('upms/resource/excel', {\n                    resourceName: this.resourceName\n                }, `resource_${new Date().getTime()}.xlsx`)\n            },\n            filterNode(value, data) {\n                if (!value) return true;\n                return data.name.indexOf(value) !== -1\n            },\n            nodeClick(data, node, v) {\n                this.resource.parentId = data.parentId;\n                if (this.resource.parentId === '-1') {\n                    this.resource.parentId = null\n                }\n                data = data.data;\n                this.resource.orderNum = data.orderNum;\n                this.resource.type = data.type;\n                this.resource.permission = data.permission;\n                this.resource.path = data.path;\n                this.resource.component = data.component;\n                this.resource.icon = data.icon;\n                this.resource.resourceName = data.resourceName;\n                this.resource.resourceId = data.resourceId;\n                this.$refs.form.clearValidate()\n            },\n            handleNumChange(val) {\n                this.resource.orderNum = val\n            },\n            chooseIcons() {\n                this.iconVisible = true\n            },\n            chooseIcon(icon) {\n                this.resource.icon = icon;\n                this.iconVisible = false\n            },\n            submit() {\n                this.$refs.form.validate((valid) => {\n                    if (valid) {\n                        this.buttonLoading = true;\n                        this.resource.createTime = this.resource.modifyTime = null;\n                        if (this.resource.resourceId) {\n                            this.$put('upms/resource/update', {...this.resource}).then(() => {\n                                this.buttonLoading = false;\n                                this.$message({\n                                    message: this.$t('tips.updateSuccess'),\n                                    type: 'success'\n                                });\n                                this.reset()\n                            }).catch(()=>{\n                                this.buttonLoading = false;\n                            });\n                        } else {\n                            this.$post('upms/resource/create', {...this.resource}).then(() => {\n                                this.buttonLoading = false;\n                                this.$message({\n                                    message: this.$t('tips.createSuccess'),\n                                    type: 'success'\n                                });\n                                this.reset()\n                            }).catch(()=>{\n                                this.buttonLoading = false;\n                            });\n                        }\n                    } else {\n                        return false\n                    }\n                })\n            },\n            reset() {\n                this.initResourceTree();\n                this.resourceName = '';\n                this.resetForm()\n            },\n            search() {\n                this.$refs.resourceTree.filter(this.resourceName)\n            },\n            add() {\n                this.resetForm()\n            },\n            deleteResource() {\n                const checked = this.$refs.resourceTree.getCheckedKeys();\n                if (checked.length === 0) {\n                    this.$message({\n                        message: this.$t('tips.noNodeSelected'),\n                        type: 'warning'\n                    })\n                } else {\n                    this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\n                        confirmButtonText: this.$t('common.confirm'),\n                        cancelButtonText: this.$t('common.cancel'),\n                        type: 'warning'\n                    }).then(() => {\n                        this.resource.resourceIds = checked.join(',');\n                        this.$delete(`upms/resource/delete/${this.resource.resourceIds}`).then(() => {\n                            this.$message({\n                                message: this.$t('tips.deleteSuccess'),\n                                type: 'success'\n                            });\n                            this.reset()\n                        })\n                    }).catch(() => {\n                        this.$refs.resourceTree.setCheckedKeys([])\n                    })\n                }\n            },\n            resetForm() {\n                this.$refs.form.clearValidate();\n                this.$refs.form.resetFields();\n                this.resource = this.initResource()\n            }\n        }\n    }\n</script>\n<style lang=\"scss\" scoped>\n    .resource {\n        margin: 10px;\n\n        .app-container {\n            margin: 0 0 10px 0 !important;\n        }\n    }\n\n    .el-card.is-always-shadow {\n        box-shadow: none;\n    }\n\n    .el-card {\n        border-radius: 0;\n        border: none;\n\n        .el-card__header {\n            padding: 10px 20px !important;\n            border-bottom: 1px solid #f1f1f1 !important;\n        }\n    }\n</style>\n"]}]}