{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/role/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/role/Index.vue","mtime":1579413305753},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js","mtime":1578533613779},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1578533683571}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport pageMixins from '@/mixins/page'\n\nexport default {\n    name: 'RoleManage',\n    mixins: [pageMixins],\n    data() {\n        return {\n            tableKey: 0,\n            loading: false,\n            buttonLoading: false,\n            list: null,\n            selection: [],\n            total: 0,\n            permsTree: [],\n            queryParams: {},\n            sort: {},\n            treeProps: {\n                label: 'name',\n                children: 'children',\n            },\n            role: this.initRole(),\n            rules: {\n                roleName: [\n                    {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n                    {min: 3, max: 10, message: this.$t('rules.range3to10'), trigger: 'blur'},\n                    {\n                        validator: (rule, value, callback) => {\n                            if (!this.role.roleId) {\n                                this.$get(`upms/role/check/${value}`).then((r) => {\n                                    if (!r.data) {\n                                        callback(this.$t('rules.roleNameExist'))\n                                    } else {\n                                        callback()\n                                    }\n                                })\n                            } else {\n                                callback()\n                            }\n                        }, trigger: 'blur'\n                    }\n                ],\n                remark: {max: 50, message: this.$t('rules.noMoreThan50'), trigger: 'blur'}\n            }\n        }\n    },\n    created() {\n        this.$nextTick(() => {\n            this.init()\n        })\n    },\n    mounted() {\n        this.initMenuTree()\n    },\n    methods: {\n        init() {\n            this.page.current = 1;\n            this.page.orders = [{\n                column: 'create_time',\n                asc: true\n            }];\n            this.findPage();\n        },\n        findPageInit() {\n            this.pageUrl = 'upms/role/page';\n            return true\n        },\n        search() {\n            this.resetForm();\n            this.init();\n        },\n        initRole() {\n            return {\n                roleId: '',\n                roleName: '',\n                defaultRole: false,\n                remark: ''\n            }\n        },\n        initMenuTree() {\n            this.$get('upms/resource/getResourceTree').then((r) => {\n                this.permsTree = r.data\n            });\n        },\n        onSelectChange(selection) {\n            this.selection = selection\n        },\n        clearSelections() {\n            this.$refs.table.clearSelection()\n        },\n        exportExcel() {\n        },\n        edit(row) {\n            this.$refs.form.clearValidate();\n            this.role = {...row};\n            if (this.role.resourceIds) {\n                this.$refs.permsTree.setCheckedKeys(this.role.resourceIds.split(','));\n            } else {\n                this.$refs.permsTree.setCheckedKeys([])\n            }\n        },\n        singleDelete(row) {\n            this.$refs.table.toggleRowSelection(row, true);\n            this.batchDelete()\n        },\n        batchDelete() {\n            if (!this.selection.length) {\n                this.$message({\n                    message: this.$t('tips.noDataSelected'),\n                    type: 'warning'\n                });\n                return\n            }\n            this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n                confirmButtonText: this.$t('common.confirm'),\n                cancelButtonText: this.$t('common.cancel'),\n                type: 'warning'\n            }).then(() => {\n                const roleIds = [];\n                this.selection.forEach((r) => {\n                    roleIds.push(r.roleId)\n                });\n                this.delete(roleIds)\n            }).catch(() => {\n                this.clearSelections()\n            })\n        },\n        delete(roleIds) {\n            this.loading = true;\n            this.$delete(`upms/role/delete/${roleIds}`).then(() => {\n                this.$message({\n                    message: this.$t('tips.deleteSuccess'),\n                    type: 'success'\n                });\n                this.search()\n            })\n        },\n        submit() {\n            this.$refs.form.validate((valid) => {\n                if (valid) {\n                    this.buttonLoading = true;\n                    if (this.role.roleId) {\n                        this.role.resourceIds = this.$refs.permsTree.getCheckedKeys().join(',');\n                        this.role.createTime = this.role.modifyTime = null;\n                        this.$put('upms/role/update', {...this.role}).then(() => {\n                            this.buttonLoading = false;\n                            this.$message({\n                                message: this.$t('tips.updateSuccess'),\n                                type: 'success'\n                            });\n                            this.reset()\n                        }).catch(e => {\n                            this.buttonLoading = false;\n                        })\n                    } else {\n                        this.role.resourceIds = this.$refs.permsTree.getCheckedKeys().join(',');\n                        this.$post('upms/role/create', {...this.role}).then(() => {\n                            this.buttonLoading = false;\n                            this.$message({\n                                message: this.$t('tips.createSuccess'),\n                                type: 'success'\n                            });\n                            this.reset()\n                        }).catch(e => {\n                            this.buttonLoading = false;\n                        })\n                    }\n                } else {\n                    return false\n                }\n            })\n        },\n        add() {\n            this.resetForm()\n        },\n        reset() {\n            this.resetForm();\n            this.page.entity = {};\n            this.sort = {};\n            this.$refs.table.clearSort();\n            this.search()\n        },\n        resetForm() {\n            this.$refs.form.clearValidate();\n            this.$refs.form.resetFields();\n            this.role = this.initRole();\n            this.$refs.permsTree.setCheckedKeys([])\n        }\n    }\n}\n",{"version":3,"sources":["Index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Index.vue","sourceRoot":"src/views/model/system/role","sourcesContent":["<template>\n    <div class=\"role\">\n        <el-row :gutter=\"10\">\n            <el-col :xs=\"24\" :sm=\"14\">\n                <div class=\"app-container\">\n                    <div class=\"filter-container\">\n                        <el-input v-model=\"page.entity.roleName\" :placeholder=\"$t('table.role.roleName')\" class=\"filter-item search-item\"\n                                  @keyup.enter.native=\"search\"/>\n                        <el-button class=\"filter-item\" type=\"primary\" plain @click=\"search\">\n                            {{ $t('table.search') }}\n                        </el-button>\n                        <el-button class=\"filter-item\" type=\"warning\" plain @click=\"reset\">\n                            {{ $t('table.reset') }}\n                        </el-button>\n                        <el-dropdown v-has-any-permission=\"['role:create','role:delete','role:export']\" trigger=\"click\" class=\"filter-item\">\n                            <el-button>\n                                {{ $t('table.more') }}<i class=\"el-icon-arrow-down el-icon--right\"/>\n                            </el-button>\n                            <el-dropdown-menu slot=\"dropdown\">\n                                <el-dropdown-item v-has-permission=\"['role:create']\" @click.native=\"add\">{{ $t('table.add') }}</el-dropdown-item>\n                                <el-dropdown-item v-has-permission=\"['role:delete']\" @click.native=\"batchDelete\">{{ $t('table.delete') }}</el-dropdown-item>\n                                <el-dropdown-item v-has-permission=\"['role:export']\" @click.native=\"exportExcel\">{{ $t('table.export') }}</el-dropdown-item>\n                            </el-dropdown-menu>\n                        </el-dropdown>\n                    </div>\n                    <el-table\n                            ref=\"table\"\n                            :key=\"tableKey\"\n                            v-loading=\"pageLoading\"\n                            :data=\"page.records\"\n                            border\n                            fit\n                            style=\"width: 100%;\"\n                            @selection-change=\"onSelectChange\"\n                            @sort-change=\"sortChange\">\n                        <el-table-column type=\"selection\" align=\"center\" width=\"40px\"/>\n                        <el-table-column :label=\"$t('table.role.roleName')\" prop=\"roleName\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"100px\">\n                            <template slot-scope=\"scope\">\n                                <span>{{ scope.row.roleName }}</span>\n                            </template>\n                        </el-table-column>\n                        <el-table-column :label=\"$t('table.role.remark')\" prop=\"remark\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"200px\">\n                            <template slot-scope=\"scope\">\n                                <span>{{ scope.row.remark }}</span>\n                            </template>\n                        </el-table-column>\n                        <el-table-column :label=\"$t('table.role.createTime')\" prop=\"create_time\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"180px\"\n                                         sortable=\"custom\">\n                            <template slot-scope=\"scope\">\n                                <span>{{ scope.row.createTime }}</span>\n                            </template>\n                        </el-table-column>\n                        <el-table-column :label=\"$t('table.operation')\" align=\"center\" width=\"150px\" class-name=\"small-padding fixed-width\">\n                            <template slot-scope=\"{row}\">\n                                <i v-has-permission=\"['role:update']\" class=\"el-icon-setting table-operation\" style=\"color: #2db7f5;\" @click=\"edit(row)\"/>\n                                <i v-has-permission=\"['role:delete']\" class=\"el-icon-delete table-operation\" style=\"color: #f50;\" @click=\"singleDelete(row)\"/>\n                                <el-link v-has-no-permission=\"['role:update','role:delete']\" class=\"no-perm\">\n                                    {{ $t('tips.noPermission') }}\n                                </el-link>\n                            </template>\n                        </el-table-column>\n                    </el-table>\n                    <!--分页组件-->\n                    <el-pagination\n                            :total=\"page.total\"\n                            :current-page=\"page.current\"\n                            style=\"margin-top: 8px;\"\n                            layout=\"total, prev, pager, next, sizes\"\n                            @size-change=\"sizeChange\"\n                            @current-change=\"pageChange\"/>\n                </div>\n            </el-col>\n            <el-col :xs=\"24\" :sm=\"10\">\n                <el-card class=\"box-card\">\n                    <div slot=\"header\" class=\"clearfix\">\n                        <span>{{ role.roleId === '' ? this.$t('common.add') : this.$t('common.edit') }}</span>\n                    </div>\n                    <div>\n                        <el-form ref=\"form\" :model=\"role\" :rules=\"rules\" label-position=\"right\" label-width=\"100px\">\n                            <el-form-item :label=\"$t('table.role.roleName')\" prop=\"roleName\">\n                                <el-input v-model=\"role.roleName\"/>\n                            </el-form-item>\n                            <el-form-item :label=\"$t('table.role.defaultRole')\" label-position=\"right\">\n                                <el-switch\n                                        v-model=\"role.defaultRole\"\n                                        active-color=\"#13ce66\"\n                                        inactive-color=\"#ff4949\">\n                                </el-switch>\n                            </el-form-item>\n                            <el-form-item :label=\"$t('table.role.remark')\" prop=\"remark\">\n                                <el-input v-model=\"role.remark\" type=\"textarea\" rows=\"3\"/>\n                            </el-form-item>\n                            <el-form-item :label=\"$t('table.role.permission')\" prop=\"remark\">\n                                <el-tree\n                                        ref=\"permsTree\"\n                                        :props=\"treeProps\"\n                                        :data=\"permsTree\"\n                                        :check-strictly=\"true\"\n                                        show-checkbox\n                                        accordion\n                                        node-key=\"id\"\n                                        highlight-current/>\n                            </el-form-item>\n                        </el-form>\n                    </div>\n                </el-card>\n                <el-card class=\"box-card\">\n                    <el-row>\n                        <el-col :span=\"24\" style=\"text-align: right\">\n                            <el-button type=\"primary\" :loading=\"buttonLoading\" plain @click=\"submit\">{{ role.roleId === '' ? this.$t('common.add') :\n                                this.$t('common.edit') }}\n                            </el-button>\n                        </el-col>\n                    </el-row>\n                </el-card>\n            </el-col>\n        </el-row>\n    </div>\n</template>\n<script>\n    import pageMixins from '@/mixins/page'\n\n    export default {\n        name: 'RoleManage',\n        mixins: [pageMixins],\n        data() {\n            return {\n                tableKey: 0,\n                loading: false,\n                buttonLoading: false,\n                list: null,\n                selection: [],\n                total: 0,\n                permsTree: [],\n                queryParams: {},\n                sort: {},\n                treeProps: {\n                    label: 'name',\n                    children: 'children',\n                },\n                role: this.initRole(),\n                rules: {\n                    roleName: [\n                        {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n                        {min: 3, max: 10, message: this.$t('rules.range3to10'), trigger: 'blur'},\n                        {\n                            validator: (rule, value, callback) => {\n                                if (!this.role.roleId) {\n                                    this.$get(`upms/role/check/${value}`).then((r) => {\n                                        if (!r.data) {\n                                            callback(this.$t('rules.roleNameExist'))\n                                        } else {\n                                            callback()\n                                        }\n                                    })\n                                } else {\n                                    callback()\n                                }\n                            }, trigger: 'blur'\n                        }\n                    ],\n                    remark: {max: 50, message: this.$t('rules.noMoreThan50'), trigger: 'blur'}\n                }\n            }\n        },\n        created() {\n            this.$nextTick(() => {\n                this.init()\n            })\n        },\n        mounted() {\n            this.initMenuTree()\n        },\n        methods: {\n            init() {\n                this.page.current = 1;\n                this.page.orders = [{\n                    column: 'create_time',\n                    asc: true\n                }];\n                this.findPage();\n            },\n            findPageInit() {\n                this.pageUrl = 'upms/role/page';\n                return true\n            },\n            search() {\n                this.resetForm();\n                this.init();\n            },\n            initRole() {\n                return {\n                    roleId: '',\n                    roleName: '',\n                    defaultRole: false,\n                    remark: ''\n                }\n            },\n            initMenuTree() {\n                this.$get('upms/resource/getResourceTree').then((r) => {\n                    this.permsTree = r.data\n                });\n            },\n            onSelectChange(selection) {\n                this.selection = selection\n            },\n            clearSelections() {\n                this.$refs.table.clearSelection()\n            },\n            exportExcel() {\n            },\n            edit(row) {\n                this.$refs.form.clearValidate();\n                this.role = {...row};\n                if (this.role.resourceIds) {\n                    this.$refs.permsTree.setCheckedKeys(this.role.resourceIds.split(','));\n                } else {\n                    this.$refs.permsTree.setCheckedKeys([])\n                }\n            },\n            singleDelete(row) {\n                this.$refs.table.toggleRowSelection(row, true);\n                this.batchDelete()\n            },\n            batchDelete() {\n                if (!this.selection.length) {\n                    this.$message({\n                        message: this.$t('tips.noDataSelected'),\n                        type: 'warning'\n                    });\n                    return\n                }\n                this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n                    confirmButtonText: this.$t('common.confirm'),\n                    cancelButtonText: this.$t('common.cancel'),\n                    type: 'warning'\n                }).then(() => {\n                    const roleIds = [];\n                    this.selection.forEach((r) => {\n                        roleIds.push(r.roleId)\n                    });\n                    this.delete(roleIds)\n                }).catch(() => {\n                    this.clearSelections()\n                })\n            },\n            delete(roleIds) {\n                this.loading = true;\n                this.$delete(`upms/role/delete/${roleIds}`).then(() => {\n                    this.$message({\n                        message: this.$t('tips.deleteSuccess'),\n                        type: 'success'\n                    });\n                    this.search()\n                })\n            },\n            submit() {\n                this.$refs.form.validate((valid) => {\n                    if (valid) {\n                        this.buttonLoading = true;\n                        if (this.role.roleId) {\n                            this.role.resourceIds = this.$refs.permsTree.getCheckedKeys().join(',');\n                            this.role.createTime = this.role.modifyTime = null;\n                            this.$put('upms/role/update', {...this.role}).then(() => {\n                                this.buttonLoading = false;\n                                this.$message({\n                                    message: this.$t('tips.updateSuccess'),\n                                    type: 'success'\n                                });\n                                this.reset()\n                            }).catch(e => {\n                                this.buttonLoading = false;\n                            })\n                        } else {\n                            this.role.resourceIds = this.$refs.permsTree.getCheckedKeys().join(',');\n                            this.$post('upms/role/create', {...this.role}).then(() => {\n                                this.buttonLoading = false;\n                                this.$message({\n                                    message: this.$t('tips.createSuccess'),\n                                    type: 'success'\n                                });\n                                this.reset()\n                            }).catch(e => {\n                                this.buttonLoading = false;\n                            })\n                        }\n                    } else {\n                        return false\n                    }\n                })\n            },\n            add() {\n                this.resetForm()\n            },\n            reset() {\n                this.resetForm();\n                this.page.entity = {};\n                this.sort = {};\n                this.$refs.table.clearSort();\n                this.search()\n            },\n            resetForm() {\n                this.$refs.form.clearValidate();\n                this.$refs.form.resetFields();\n                this.role = this.initRole();\n                this.$refs.permsTree.setCheckedKeys([])\n            }\n        }\n    }\n</script>\n<style lang=\"scss\" scoped>\n    .role {\n        margin: 10px;\n\n        .app-container {\n            margin: 0 0 10px 0 !important;\n        }\n    }\n\n    .el-card.is-always-shadow {\n        box-shadow: none;\n    }\n\n    .el-card {\n        border-radius: 0;\n        border: none;\n\n        .el-card__header {\n            padding: 10px 20px !important;\n            border-bottom: 1px solid #f1f1f1 !important;\n        }\n    }\n</style>\n\n"]}]}