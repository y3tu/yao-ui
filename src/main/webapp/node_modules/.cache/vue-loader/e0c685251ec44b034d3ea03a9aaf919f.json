{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/layout/components/TagsView/index.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/layout/components/TagsView/index.vue","mtime":1580538658926},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/css-loader/index.js","mtime":1578533714393},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1578533683571},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/sass-loader/lib/loader.js","mtime":1578533721270},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1578533683571}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//reset element css of el-icon-close\n.tags-view-wrapper {\n    .tags-view-item {\n        .el-icon-close {\n            color: #fff;\n            width: 16px;\n            height: 16px;\n            vertical-align: 2px;\n            font-size: 12px;\n            font-weight: 600;\n            border-radius: 50%;\n            text-align: center;\n            transform-origin: 100% 50%;\n\n            &:before {\n                transform: scale(.6);\n                display: inline-block;\n                vertical-align: -3px;\n            }\n\n            &:hover {\n                /*background-color: #b4bccc;*/\n                /*color: #fff;*/\n            }\n        }\n    }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/layout/components/TagsView","sourcesContent":["<template>\n    <div id=\"tags-view-container\" class=\"tags-view-container\">\n        <scroll-pane ref=\"scrollPane\" class=\"tags-view-wrapper\">\n            <router-link\n                    v-for=\"tag in visitedViews\"\n                    ref=\"tag\"\n                    :key=\"tag.path\"\n                    :class=\"isActive(tag)?'active':''\"\n                    :to=\"{ path: tag.path, query: tag.query, fullPath: tag.fullPath }\"\n                    tag=\"span\"\n                    class=\"tags-view-item\"\n                    @click.middle.native=\"closeSelectedTag(tag)\"\n                    @contextmenu.prevent.native=\"openMenu(tag,$event)\">\n                {{ generateTitle(tag.title) }}\n                <span v-if=\"!tag.meta.affix\" class=\"el-icon-close\" @click.prevent.stop=\"closeSelectedTag(tag)\"/>\n                <span v-else class=\"el-icon-none\"/>\n            </router-link>\n        </scroll-pane>\n        <ul v-show=\"visible\" :style=\"{left:left+'px',top:top+'px'}\" class=\"contextmenu\">\n            <li @click=\"refreshSelectedTag(selectedTag)\">\n                {{ $t('tagsView.refresh') }}\n            </li>\n            <li v-if=\"!(selectedTag.meta&&selectedTag.meta.affix)\" @click=\"closeSelectedTag(selectedTag)\">\n                {{ $t('tagsView.close') }}\n            </li>\n            <li @click=\"closeOthersTags\">\n                {{ $t('tagsView.closeOthers') }}\n            </li>\n            <li @click=\"closeAllTags(selectedTag)\">\n                {{ $t('tagsView.closeAll') }}\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\n    import ScrollPane from './ScrollPane'\n    import {generateTitle} from '@/utils/i18n'\n    import path from 'path'\n\n    export default {\n        components: {ScrollPane},\n        data() {\n            return {\n                visible: false,\n                top: 0,\n                left: 0,\n                selectedTag: {},\n                affixTags: []\n            }\n        },\n        computed: {\n            visitedViews() {\n                return this.$store.state.tagsView.visitedViews\n            },\n            routes() {\n                return this.$store.state.account.routes\n            }\n        },\n        watch: {\n            $route() {\n                this.addTags();\n                this.moveToCurrentTag()\n            },\n            visible(value) {\n                if (value) {\n                    document.body.addEventListener('click', this.closeMenu)\n                } else {\n                    document.body.removeEventListener('click', this.closeMenu)\n                }\n            }\n        },\n        mounted() {\n            this.initTags();\n            this.addTags()\n        },\n        methods: {\n            generateTitle, // generateTitle by vue-i18n\n            isActive(route) {\n                return route.path === this.$route.path\n            },\n            filterAffixTags(routes, basePath = '/') {\n                let tags = [];\n                routes.forEach(route => {\n                    if (route.meta && route.meta.affix) {\n                        const tagPath = path.resolve(basePath, route.path);\n                        tags.push({\n                            fullPath: tagPath,\n                            path: tagPath,\n                            name: route.name,\n                            meta: {...route.meta}\n                        })\n                    }\n                    if (route.children) {\n                        const tempTags = this.filterAffixTags(route.children, route.path);\n                        if (tempTags.length >= 1) {\n                            tags = [...tags, ...tempTags]\n                        }\n                    }\n                });\n                return tags\n            },\n            initTags() {\n                const affixTags = this.affixTags = this.filterAffixTags(this.routes);\n                for (const tag of affixTags) {\n                    // Must have tag name\n                    if (tag.name) {\n                        this.$store.dispatch('tagsView/addVisitedView', tag)\n                    }\n                }\n            },\n            addTags() {\n                const {name} = this.$route;\n                if (name) {\n                    this.$store.dispatch('tagsView/addView', this.$route)\n                }\n                return false\n            },\n            moveToCurrentTag() {\n                const tags = this.$refs.tag;\n                this.$nextTick(() => {\n                    for (const tag of tags) {\n                        if (tag.to.path === this.$route.path) {\n                            this.$refs.scrollPane.moveToTarget(tag);\n                            // when query is different then update\n                            if (tag.to.fullPath !== this.$route.fullPath) {\n                                this.$store.dispatch('tagsView/updateVisitedView', this.$route)\n                            }\n                            break\n                        }\n                    }\n                })\n            },\n            refreshSelectedTag(view) {\n                this.$store.dispatch('tagsView/delCachedView', view).then(() => {\n                    const {fullPath} = view;\n                    this.$nextTick(() => {\n                        this.$router.replace({\n                            path: '/redirect' + fullPath\n                        })\n                    })\n                })\n            },\n            closeSelectedTag(view) {\n                this.$store.dispatch('tagsView/delView', view).then(({visitedViews}) => {\n                    if (this.isActive(view)) {\n                        this.toLastView(visitedViews, view)\n                    }\n                })\n            },\n            closeOthersTags() {\n                this.$router.push(this.selectedTag);\n                this.$store.dispatch('tagsView/delOthersViews', this.selectedTag).then(() => {\n                    this.moveToCurrentTag()\n                })\n            },\n            closeAllTags(view) {\n                this.$store.dispatch('tagsView/delAllViews').then(({visitedViews}) => {\n                    if (this.affixTags.some(tag => tag.path === view.path)) {\n                        return\n                    }\n                    this.toLastView(visitedViews, view)\n                })\n            },\n            toLastView(visitedViews, view) {\n                const latestView = visitedViews.slice(-1)[0];\n                if (latestView) {\n                    this.$router.push(latestView)\n                } else {\n                    // now the default is to redirect to the home page if there is no tags-view,\n                    // you can adjust it according to your needs.\n                    if (view.name === 'Dashboard') {\n                        // to reload home page\n                        this.$router.replace({path: '/redirect' + view.fullPath})\n                    } else {\n                        this.$router.push('/')\n                    }\n                }\n            },\n            openMenu(tag, e) {\n                const menuMinWidth = 105;\n                const offsetLeft = this.$el.getBoundingClientRect().left; // container margin left\n                const offsetWidth = this.$el.offsetWidth; // container width\n                const maxLeft = offsetWidth - menuMinWidth; // left boundary\n                const left = e.clientX - offsetLeft + 15; // 15: margin right\n\n                if (left > maxLeft) {\n                    this.left = maxLeft\n                } else {\n                    this.left = left\n                }\n\n                this.top = e.clientY;\n                this.visible = true;\n                this.selectedTag = tag\n            },\n            closeMenu() {\n                this.visible = false\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .tags-view-container {\n        height: 35px;\n        width: 100%;\n        background: #fff;\n        border-bottom: 1px solid #f1f1f1;\n\n        .tags-view-wrapper {\n            .tags-view-item {\n                display: inline-block;\n                position: relative;\n                cursor: pointer;\n                height: 34px;\n                line-height: 34px;\n                border-left: 1px solid #f1f1f1;\n                color: #999;\n                background: #fff;\n                padding: 0 5px 0 20px;\n                font-size: 13px;\n                transition: all .3s;\n\n                .el-icon-none {\n                    width: 16px\n                }\n\n                &:hover {\n                    color: #495060;\n\n                    & .el-icon-close {\n                        font-size: 1rem;\n                        font-weight: bold;\n                        color: red;\n                    }\n                }\n\n                &:first-of-type {\n                }\n\n                &:last-of-type {\n                    border-right: 1px solid #f1f1f1;\n                }\n\n                &.active {\n                    /*background-color: #42b983;*/\n                    /*color: #fff;*/\n                    /*border-color: #42b983;*/\n                    &::before {\n                        content: '';\n                        background: #85ef47 !important;\n                        box-shadow: 0 0 7px #b7eb8f;\n                        display: inline-block;\n                        bottom: 3px;\n                        width: 5px;\n                        height: 5px;\n                        border-radius: 50%;\n                        position: relative;\n                        margin-right: 4px;\n                    }\n                }\n            }\n        }\n\n        .contextmenu {\n            margin: 0;\n            background: #fff;\n            z-index: 3000;\n            position: absolute;\n            list-style-type: none;\n            padding: 5px 0;\n            border-radius: 4px;\n            font-size: 13px;\n            font-weight: 400;\n            color: #333;\n            box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n\n            li {\n                margin: 0;\n                padding: 7px 20px;\n                cursor: pointer;\n\n                &:hover {\n                    background-color: #e8f4ff;\n                    color: #46a6ff;\n                }\n            }\n        }\n    }\n</style>\n\n<style lang=\"scss\">\n    //reset element css of el-icon-close\n    .tags-view-wrapper {\n        .tags-view-item {\n            .el-icon-close {\n                color: #fff;\n                width: 16px;\n                height: 16px;\n                vertical-align: 2px;\n                font-size: 12px;\n                font-weight: 600;\n                border-radius: 50%;\n                text-align: center;\n                transform-origin: 100% 50%;\n\n                &:before {\n                    transform: scale(.6);\n                    display: inline-block;\n                    vertical-align: -3px;\n                }\n\n                &:hover {\n                    /*background-color: #b4bccc;*/\n                    /*color: #fff;*/\n                }\n            }\n        }\n    }\n</style>\n"]}]}