{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/user/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/user/Index.vue","mtime":1579413305754},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js","mtime":1578533613779},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1578533683571}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport page from '@/mixins/page'\n\nimport UserEdit from './Edit'\nimport UserView from './View'\n\nexport default {\n    name: 'UserManage',\n    mixins: [page],\n    components: {UserEdit, UserView},\n    filters: {\n        sexFilter(status) {\n            const map = {\n                0: 'success',\n                1: 'danger',\n                2: 'info'\n            };\n            return map[status]\n        },\n        statusFilter(status) {\n            const map = {\n                0: 'danger',\n                1: 'success'\n            };\n            return map[status]\n        }\n    },\n    data() {\n        return {\n            dialog: {\n                isVisible: false,\n                title: ''\n            },\n            userViewVisible: false,\n            tableKey: 0,\n            loading: false,\n            list: null,\n            total: 0,\n            sort: {},\n            selection: []\n        }\n    },\n    computed: {\n        currentUser() {\n            return this.$store.state.account.user\n        }\n    },\n    created() {\n        this.$nextTick(() => {\n            this.init()\n        })\n    },\n    mounted() {\n    },\n    methods: {\n        transSex(sex) {\n            switch (sex) {\n                case '0':\n                    return this.$t('common.sex.male');\n                case '1':\n                    return this.$t('common.sex.female');\n                default:\n                    return this.$t('common.sex.secret')\n            }\n        },\n        filterStatus(value, row) {\n            return row.status === value\n        },\n        filterSex(value, row) {\n            return row.sex === value\n        },\n        viewClose() {\n            this.userViewVisible = false\n        },\n        editClose() {\n            this.dialog.isVisible = false\n        },\n        editSuccess() {\n            this.search()\n        },\n        onSelectChange(selection) {\n            this.selection = selection\n        },\n        init() {\n            this.findPage();\n        },\n        findPageInit() {\n            this.pageUrl = 'upms/user/page';\n            return true;\n        },\n        search() {\n            if (this.page.params.timeRange) {\n                this.page.params.createTimeFrom = this.page.params.timeRange[0];\n                this.page.params.createTimeTo = this.page.params.timeRange[1]\n            }\n            this.findPage();\n        },\n        reset() {\n            this.resetPage();\n            this.$refs.table.clearSort();\n            this.$refs.table.clearFilter();\n            this.search()\n        },\n        exportExcel() {\n\n        },\n        add() {\n            this.dialog.title = this.$t('common.add');\n            this.dialog.isVisible = true\n        },\n        resetPassword() {\n            if (!this.selection.length) {\n                this.$message({\n                    message: this.$t('tips.noDataSelected'),\n                    type: 'warning'\n                });\n                return\n            }\n            this.$confirm(this.$t('tips.confirmRestPassword'), this.$t('common.tips'), {\n                confirmButtonText: this.$t('common.confirm'),\n                cancelButtonText: this.$t('common.cancel'),\n                type: 'warning'\n            }).then(() => {\n                const userNames = [];\n                this.selection.forEach((u) => {\n                    userNames.push(u.username)\n                });\n                this.$put('upms/user/password/reset', {\n                    usernames: userNames.join(',')\n                }).then(() => {\n                    this.$message({\n                        message: this.$t('tips.resetPasswordSuccess'),\n                        type: 'success'\n                    });\n                    this.clearSelections()\n                })\n            }).catch(() => {\n                this.clearSelections()\n            })\n        },\n        singleDelete(row) {\n            this.$refs.table.toggleRowSelection(row, true);\n            this.batchDelete()\n        },\n        batchDelete() {\n            if (!this.selection.length) {\n                this.$message({\n                    message: this.$t('tips.noDataSelected'),\n                    type: 'warning'\n                });\n                return\n            }\n            let contain = false;\n            this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n                confirmButtonText: this.$t('common.confirm'),\n                cancelButtonText: this.$t('common.cancel'),\n                type: 'warning'\n            }).then(() => {\n                const userIds = [];\n                this.selection.forEach((u) => {\n                    if (u.userId === this.currentUser.userId) {\n                        contain = true;\n                        return\n                    }\n                    userIds.push(u.userId)\n                });\n                if (contain) {\n                    this.$message({\n                        message: this.$t('tips.containCurrentUser'),\n                        type: 'warning'\n                    });\n                    this.clearSelections()\n                } else {\n                    this.delete(userIds)\n                }\n            }).catch(() => {\n                this.clearSelections()\n            })\n        },\n        clearSelections() {\n            this.$refs.table.clearSelection()\n        },\n        delete(userIds) {\n            this.loading = true;\n            this.$delete(`upms/user/delByIds/${userIds}`).then(() => {\n                this.$message({\n                    message: this.$t('tips.deleteSuccess'),\n                    type: 'success'\n                });\n                this.search()\n            })\n        },\n        view(row) {\n            this.$refs.view.setUser(row);\n            this.userViewVisible = true\n        },\n        edit(row) {\n            let roleId = [];\n            if (row.roleId && typeof row.roleId === 'string') {\n                roleId = row.roleId.split(',');\n                row.roleId = roleId\n            }\n            this.$refs.edit.setUser(row);\n            this.dialog.title = this.$t('common.edit');\n            this.dialog.isVisible = true\n        }\n    }\n}\n",{"version":3,"sources":["Index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0HA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Index.vue","sourceRoot":"src/views/model/system/user","sourcesContent":["<template>\n    <div class=\"app-container\">\n        <div class=\"filter-container\">\n            <el-input v-model=\"page.entity.username\" :placeholder=\"$t('table.user.username')\" class=\"filter-item search-item\"\n                      @keyup.enter.native=\"search\"/>\n            <el-input v-model=\"page.entity.departmentName\" :placeholder=\"$t('table.user.department')\" class=\"filter-item search-item\"\n                      @keyup.enter.native=\"search\"/>\n            <el-date-picker\n                    v-model=\"page.params.timeRange\"\n                    :range-separator=\"null\"\n                    :start-placeholder=\"$t('table.user.createTime')\"\n                    value-format=\"yyyy-MM-dd\"\n                    class=\"filter-item search-item date-range-item\"\n                    type=\"daterange\"\n                    @keyup.enter.native=\"search\"/>\n            <el-button class=\"filter-item\" type=\"primary\" plain @click=\"search\">\n                {{ $t('table.search') }}\n            </el-button>\n            <el-button class=\"filter-item\" type=\"warning\" plain @click=\"reset\">\n                {{ $t('table.reset') }}\n            </el-button>\n            <el-dropdown v-has-any-permission=\"['user:create','user:delete','user:reset','user:export']\" trigger=\"click\" class=\"filter-item\">\n                <el-button>\n                    {{ $t('table.more') }}<i class=\"el-icon-arrow-down el-icon--right\"/>\n                </el-button>\n                <el-dropdown-menu slot=\"dropdown\">\n                    <el-dropdown-item v-has-permission=\"['user:create']\" @click.native=\"add\">{{ $t('table.add') }}</el-dropdown-item>\n                    <el-dropdown-item v-has-permission=\"['user:delete']\" @click.native=\"batchDelete\">{{ $t('table.delete') }}</el-dropdown-item>\n                    <el-dropdown-item v-has-permission=\"['user:reset']\" @click.native=\"resetPassword\">{{ $t('table.resetPassword') }}</el-dropdown-item>\n                    <el-dropdown-item v-has-permission=\"['user:export']\" @click.native=\"exportExcel\">{{ $t('table.export') }}</el-dropdown-item>\n                </el-dropdown-menu>\n            </el-dropdown>\n        </div>\n\n        <el-table\n                ref=\"table\"\n                :key=\"tableKey\"\n                v-loading=\"pageLoading\"\n                :data=\"page.records\"\n                border\n                fit\n                style=\"width: 100%;\"\n                @selection-change=\"onSelectChange\"\n                @sort-change=\"sortChange\">\n            <el-table-column type=\"selection\" align=\"center\" width=\"40px\"/>\n            <el-table-column :label=\"$t('table.user.username')\" prop=\"username\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"120px\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.username }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column\n                    :label=\"$t('table.user.sex')\"\n                    :filters=\"[{ text: $t('common.sex.male'), value: '0' }, { text: $t('common.sex.female'), value: '1' }, { text: $t('common.sex.secret'), value: '2' }]\"\n                    :filter-method=\"filterSex\"\n                    class-name=\"status-col\">\n                <template slot-scope=\"{row}\">\n                    <el-tag :type=\"row.sex | sexFilter\">\n                        {{ transSex(row.sex) }}\n                    </el-tag>\n                </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('table.user.email')\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"150px\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.email }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('table.user.department')\" align=\"center\" min-width=\"100px\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.departmentName }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column\n                    :label=\"$t('table.user.status')\"\n                    :filters=\"[{ text: $t('common.status.valid'), value: '1' }, { text: $t('common.status.invalid'), value: '0' }]\"\n                    :filter-method=\"filterStatus\"\n                    class-name=\"status-col\">\n                <template slot-scope=\"{row}\">\n                    <el-tag :type=\"row.status | statusFilter\">\n                        {{ row.status === '1' ? $t('common.status.valid') : $t('common.status.invalid') }}\n                    </el-tag>\n                </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('table.user.createTime')\" prop=\"createTime\" align=\"center\" min-width=\"180px\" sortable=\"custom\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.createTime }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('table.operation')\" align=\"center\" min-width=\"150px\" class-name=\"small-padding fixed-width\">\n                <template slot-scope=\"{row}\">\n                    <i v-hasPermission=\"['user:view']\" class=\"el-icon-view table-operation\" style=\"color: #87d068;\" @click=\"view(row)\"/>\n                    <i v-hasPermission=\"['user:update']\" class=\"el-icon-setting table-operation\" style=\"color: #2db7f5;\" @click=\"edit(row)\"/>\n                    <i v-hasPermission=\"['user:delete']\" class=\"el-icon-delete table-operation\" style=\"color: #f50;\" @click=\"singleDelete(row)\"/>\n                    <el-link v-has-no-permission=\"['user:view','user:update','user:delete']\" class=\"no-perm\">\n                        {{ $t('tips.noPermission') }}\n                    </el-link>\n                </template>\n            </el-table-column>\n        </el-table>\n\n        <!--分页组件-->\n        <el-pagination\n                :total=\"page.total\"\n                :current-page=\"page.current\"\n                style=\"margin-top: 8px;\"\n                layout=\"total, sizes, prev, pager, next, jumper\"\n                @size-change=\"sizeChange\"\n                @current-change=\"pageChange\"/>\n\n        <user-edit\n                ref=\"edit\"\n                :dialog-visible=\"dialog.isVisible\"\n                :title=\"dialog.title\"\n                @success=\"editSuccess\"\n                @close=\"editClose\"/>\n        <user-view\n                ref=\"view\"\n                :dialog-visible=\"userViewVisible\"\n                @close=\"viewClose\"/>\n    </div>\n</template>\n\n<script>\n    import page from '@/mixins/page'\n\n    import UserEdit from './Edit'\n    import UserView from './View'\n\n    export default {\n        name: 'UserManage',\n        mixins: [page],\n        components: {UserEdit, UserView},\n        filters: {\n            sexFilter(status) {\n                const map = {\n                    0: 'success',\n                    1: 'danger',\n                    2: 'info'\n                };\n                return map[status]\n            },\n            statusFilter(status) {\n                const map = {\n                    0: 'danger',\n                    1: 'success'\n                };\n                return map[status]\n            }\n        },\n        data() {\n            return {\n                dialog: {\n                    isVisible: false,\n                    title: ''\n                },\n                userViewVisible: false,\n                tableKey: 0,\n                loading: false,\n                list: null,\n                total: 0,\n                sort: {},\n                selection: []\n            }\n        },\n        computed: {\n            currentUser() {\n                return this.$store.state.account.user\n            }\n        },\n        created() {\n            this.$nextTick(() => {\n                this.init()\n            })\n        },\n        mounted() {\n        },\n        methods: {\n            transSex(sex) {\n                switch (sex) {\n                    case '0':\n                        return this.$t('common.sex.male');\n                    case '1':\n                        return this.$t('common.sex.female');\n                    default:\n                        return this.$t('common.sex.secret')\n                }\n            },\n            filterStatus(value, row) {\n                return row.status === value\n            },\n            filterSex(value, row) {\n                return row.sex === value\n            },\n            viewClose() {\n                this.userViewVisible = false\n            },\n            editClose() {\n                this.dialog.isVisible = false\n            },\n            editSuccess() {\n                this.search()\n            },\n            onSelectChange(selection) {\n                this.selection = selection\n            },\n            init() {\n                this.findPage();\n            },\n            findPageInit() {\n                this.pageUrl = 'upms/user/page';\n                return true;\n            },\n            search() {\n                if (this.page.params.timeRange) {\n                    this.page.params.createTimeFrom = this.page.params.timeRange[0];\n                    this.page.params.createTimeTo = this.page.params.timeRange[1]\n                }\n                this.findPage();\n            },\n            reset() {\n                this.resetPage();\n                this.$refs.table.clearSort();\n                this.$refs.table.clearFilter();\n                this.search()\n            },\n            exportExcel() {\n\n            },\n            add() {\n                this.dialog.title = this.$t('common.add');\n                this.dialog.isVisible = true\n            },\n            resetPassword() {\n                if (!this.selection.length) {\n                    this.$message({\n                        message: this.$t('tips.noDataSelected'),\n                        type: 'warning'\n                    });\n                    return\n                }\n                this.$confirm(this.$t('tips.confirmRestPassword'), this.$t('common.tips'), {\n                    confirmButtonText: this.$t('common.confirm'),\n                    cancelButtonText: this.$t('common.cancel'),\n                    type: 'warning'\n                }).then(() => {\n                    const userNames = [];\n                    this.selection.forEach((u) => {\n                        userNames.push(u.username)\n                    });\n                    this.$put('upms/user/password/reset', {\n                        usernames: userNames.join(',')\n                    }).then(() => {\n                        this.$message({\n                            message: this.$t('tips.resetPasswordSuccess'),\n                            type: 'success'\n                        });\n                        this.clearSelections()\n                    })\n                }).catch(() => {\n                    this.clearSelections()\n                })\n            },\n            singleDelete(row) {\n                this.$refs.table.toggleRowSelection(row, true);\n                this.batchDelete()\n            },\n            batchDelete() {\n                if (!this.selection.length) {\n                    this.$message({\n                        message: this.$t('tips.noDataSelected'),\n                        type: 'warning'\n                    });\n                    return\n                }\n                let contain = false;\n                this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n                    confirmButtonText: this.$t('common.confirm'),\n                    cancelButtonText: this.$t('common.cancel'),\n                    type: 'warning'\n                }).then(() => {\n                    const userIds = [];\n                    this.selection.forEach((u) => {\n                        if (u.userId === this.currentUser.userId) {\n                            contain = true;\n                            return\n                        }\n                        userIds.push(u.userId)\n                    });\n                    if (contain) {\n                        this.$message({\n                            message: this.$t('tips.containCurrentUser'),\n                            type: 'warning'\n                        });\n                        this.clearSelections()\n                    } else {\n                        this.delete(userIds)\n                    }\n                }).catch(() => {\n                    this.clearSelections()\n                })\n            },\n            clearSelections() {\n                this.$refs.table.clearSelection()\n            },\n            delete(userIds) {\n                this.loading = true;\n                this.$delete(`upms/user/delByIds/${userIds}`).then(() => {\n                    this.$message({\n                        message: this.$t('tips.deleteSuccess'),\n                        type: 'success'\n                    });\n                    this.search()\n                })\n            },\n            view(row) {\n                this.$refs.view.setUser(row);\n                this.userViewVisible = true\n            },\n            edit(row) {\n                let roleId = [];\n                if (row.roleId && typeof row.roleId === 'string') {\n                    roleId = row.roleId.split(',');\n                    row.roleId = roleId\n                }\n                this.$refs.edit.setUser(row);\n                this.dialog.title = this.$t('common.edit');\n                this.dialog.isVisible = true\n            }\n        }\n    }\n</script>\n<style lang=\"scss\" scoped>\n</style>\n"]}]}