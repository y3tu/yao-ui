{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/user/Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/user/Edit.vue","mtime":1579413305753},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js","mtime":1578533613779},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1578533683571}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {validMobile} from '@/utils/my-validate'\nimport Treeselect from '@riophae/vue-treeselect'\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\n\nexport default {\n    name: 'UserEdit',\n    components: {Treeselect},\n    props: {\n        dialogVisible: {\n            type: Boolean,\n            default: false\n        },\n        title: {\n            type: String,\n            default: ''\n        }\n    },\n    data() {\n        return {\n            user: this.initUser(),\n            buttonLoading: false,\n            screenWidth: 0,\n            width: this.initWidth(),\n            departments: [],\n            treeSelectNormalizer(node) {\n                if (node.children == null || node.children.length < 1) {\n                    delete node.children\n                }\n                return {\n                    label: node.name\n                }\n            },\n            roles: [],\n            rules: {\n                username: [\n                    {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n                    {min: 4, max: 10, message: this.$t('rules.range4to10'), trigger: 'blur'},\n                    {\n                        validator: (rule, value, callback) => {\n                            if (!this.user.userId) {\n                                this.$get(`upms/user/checkUsername/${value}`).then((r) => {\n                                    if (!r.data) {\n                                        callback(this.$t('rules.usernameExist'))\n                                    } else {\n                                        callback()\n                                    }\n                                })\n                            } else {\n                                callback()\n                            }\n                        }, trigger: 'blur'\n                    }\n                ],\n                email: {type: 'email', message: this.$t('rules.email'), trigger: 'blur'},\n                mobile: [\n                    {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n                    {\n                        validator: (rule, value, callback) => {\n                            if (value !== '' && !validMobile(value)) {\n                                callback(this.$t('rules.mobile'))\n                            }\n                            if (!this.user.userId) {\n                                this.$get(`upms/user/checkMobile/${value}`).then((r) => {\n                                    if (!r.data) {\n                                        callback(this.$t('rules.mobileExist'))\n                                    } else {\n                                        callback()\n                                    }\n                                })\n                            } else {\n                                callback()\n                            }\n                        }, trigger: 'blur'\n                    }],\n                roleId: {required: true, message: this.$t('rules.require'), trigger: 'change'},\n                sex: {required: true, message: this.$t('rules.require'), trigger: 'change'},\n                status: {required: true, message: this.$t('rules.require'), trigger: 'blur'}\n            }\n        }\n    },\n    computed: {\n        isVisible: {\n            get() {\n                return this.dialogVisible\n            },\n            set() {\n                this.close();\n                this.reset()\n            }\n        }\n    },\n    mounted() {\n        this.initDepartment();\n        this.initRoles();\n        window.onresize = () => {\n            return (() => {\n                this.width = this.initWidth()\n            })()\n        }\n    },\n    methods: {\n        initUser() {\n            return {\n                userId: '',\n                username: '',\n                password: '1234qwer',\n                email: '',\n                mobile: '',\n                sex: '',\n                status: '1',\n                departmentId: null,\n                roleId: []\n            }\n        },\n        initWidth() {\n            this.screenWidth = document.body.clientWidth;\n            if (this.screenWidth < 991) {\n                return '90%'\n            } else if (this.screenWidth < 1400) {\n                return '45%'\n            } else {\n                return '800px'\n            }\n        },\n        initDepartment() {\n            this.$get('upms/department/tree').then((r) => {\n                this.departments = r.data;\n            }).catch((error) => {\n                console.error(error);\n                this.$message({\n                    message: this.$t('tips.getDataFail'),\n                    type: 'error'\n                })\n            })\n        },\n        initRoles() {\n            this.$get('upms/role/options').then((r) => {\n                this.roles = r.data\n            }).catch((error) => {\n                console.error(error);\n                this.$message({\n                    message: this.$t('tips.getDataFail'),\n                    type: 'error'\n                })\n            })\n        },\n        setUser(val) {\n            this.user = {...val}\n        },\n        close() {\n            this.$emit('close')\n        },\n        submitForm() {\n            this.$refs.form.validate((valid) => {\n                if (valid) {\n                    this.buttonLoading = true;\n                    if (!this.user.userId) {\n                        // create\n                        let roleIdOld = this.user.roleId;\n                        this.user.roleId = this.user.roleId.join(',');\n                        this.$post('upms/user/create', {...this.user}).then(() => {\n                            this.buttonLoading = false;\n                            this.isVisible = false;\n                            this.$message({\n                                message: this.$t('tips.createSuccess'),\n                                type: 'success'\n                            });\n                            this.$emit('success')\n                        }).catch(() => {\n                            this.buttonLoading = false;\n                            this.user.roleId = roleIdOld;\n                        });\n                    } else {\n                        // update\n                        let roleIdOld = this.user.roleId;\n                        this.user.createTime = this.user.modifyTime = this.user.lastLoginTime = null;\n                        this.$put('upms/user/update', {...this.user}).then(() => {\n                            this.buttonLoading = false;\n                            this.isVisible = false;\n                            this.$message({\n                                message: this.$t('tips.updateSuccess'),\n                                type: 'success'\n                            });\n                            this.$emit('success')\n                        }).catch(() => {\n                            this.buttonLoading = false;\n                            this.user.roleId = roleIdOld;\n                        });\n                    }\n                } else {\n                    return false\n                }\n            })\n        },\n        reset() {\n            // 先清除校验，再清除表单，不然有奇怪的bug\n            this.$refs.form.clearValidate();\n            this.$refs.form.resetFields();\n            this.user = this.initUser()\n        }\n    }\n}\n",{"version":3,"sources":["Edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Edit.vue","sourceRoot":"src/views/model/system/user","sourcesContent":["<template>\n    <el-dialog\n            :title=\"title\"\n            :width=\"width\"\n            top=\"50px\"\n            :close-on-click-modal=\"false\"\n            :close-on-press-escape=\"false\"\n            :visible.sync=\"isVisible\">\n        <el-form ref=\"form\" :model=\"user\" :rules=\"rules\" label-position=\"right\" label-width=\"100px\">\n            <el-form-item :label=\"$t('table.user.username')\" prop=\"username\">\n                <el-input v-model=\"user.username\"/>\n            </el-form-item>\n            <el-form-item v-show=\"user.userId === ''\" :label=\"$t('table.user.password')\" prop=\"password\">\n                <el-tooltip class=\"item\" effect=\"dark\" :content=\"$t('tips.defaultPassword')\" placement=\"top-start\">\n                    <el-input value=\"1234qwer\" type=\"password\" readonly/>\n                </el-tooltip>\n            </el-form-item>\n            <el-form-item :label=\"$t('table.user.email')\" prop=\"email\">\n                <el-input v-model=\"user.email\"/>\n            </el-form-item>\n            <el-form-item :label=\"$t('table.user.mobile')\" prop=\"mobile\">\n                <el-input v-model=\"user.mobile\"/>\n            </el-form-item>\n            <el-form-item :label=\"$t('table.user.department')\" prop=\"departmentId\">\n                <treeselect\n                        v-model=\"user.departmentId\"\n                        :normalizer=\"treeSelectNormalizer\"\n                        :multiple=\"false\"\n                        :options=\"departments\"\n                        :clear-value-text=\"$t('common.clear')\"\n                        placeholder=\" \"\n                        style=\"width:100%\"/>\n            </el-form-item>\n            <el-form-item :label=\"$t('table.user.role')\" prop=\"roleId\">\n                <el-select v-model=\"user.roleId\" multiple value=\"\" placeholder=\"\" style=\"width:100%\">\n                    <el-option\n                            v-for=\"item in roles\"\n                            :key=\"item.roleId\"\n                            :label=\"item.roleName\"\n                            :value=\"String(item.roleId)\"/>\n                </el-select>\n            </el-form-item>\n            <el-form-item :label=\"$t('table.user.sex')\" prop=\"sex\">\n                <el-select v-model=\"user.sex\" value=\"\" placeholder=\"\" style=\"width:100%\">\n                    <el-option value=\"0\" :label=\"$t('common.sex.male') \"/>\n                    <el-option value=\"1\" :label=\"$t('common.sex.female') \"/>\n                    <el-option value=\"2\" :label=\"$t('common.sex.secret') \"/>\n                </el-select>\n            </el-form-item>\n            <el-form-item :label=\"$t('table.user.status')\" prop=\"status\">\n                <el-radio-group v-model=\"user.status\">\n                    <el-radio label=\"1\">{{ $t('common.status.valid') }}</el-radio>\n                    <el-radio label=\"0\">{{ $t('common.status.invalid') }}</el-radio>\n                </el-radio-group>\n            </el-form-item>\n        </el-form>\n        <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button type=\"warning\" plain :loading=\"buttonLoading\" @click=\"isVisible = false\">\n                {{ $t('common.cancel') }}\n            </el-button>\n            <el-button type=\"primary\" plain :loading=\"buttonLoading\" @click=\"submitForm\">\n                {{ $t('common.confirm') }}\n            </el-button>\n        </div>\n    </el-dialog>\n</template>\n<script>\n    import {validMobile} from '@/utils/my-validate'\n    import Treeselect from '@riophae/vue-treeselect'\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n\n    export default {\n        name: 'UserEdit',\n        components: {Treeselect},\n        props: {\n            dialogVisible: {\n                type: Boolean,\n                default: false\n            },\n            title: {\n                type: String,\n                default: ''\n            }\n        },\n        data() {\n            return {\n                user: this.initUser(),\n                buttonLoading: false,\n                screenWidth: 0,\n                width: this.initWidth(),\n                departments: [],\n                treeSelectNormalizer(node) {\n                    if (node.children == null || node.children.length < 1) {\n                        delete node.children\n                    }\n                    return {\n                        label: node.name\n                    }\n                },\n                roles: [],\n                rules: {\n                    username: [\n                        {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n                        {min: 4, max: 10, message: this.$t('rules.range4to10'), trigger: 'blur'},\n                        {\n                            validator: (rule, value, callback) => {\n                                if (!this.user.userId) {\n                                    this.$get(`upms/user/checkUsername/${value}`).then((r) => {\n                                        if (!r.data) {\n                                            callback(this.$t('rules.usernameExist'))\n                                        } else {\n                                            callback()\n                                        }\n                                    })\n                                } else {\n                                    callback()\n                                }\n                            }, trigger: 'blur'\n                        }\n                    ],\n                    email: {type: 'email', message: this.$t('rules.email'), trigger: 'blur'},\n                    mobile: [\n                        {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n                        {\n                            validator: (rule, value, callback) => {\n                                if (value !== '' && !validMobile(value)) {\n                                    callback(this.$t('rules.mobile'))\n                                }\n                                if (!this.user.userId) {\n                                    this.$get(`upms/user/checkMobile/${value}`).then((r) => {\n                                        if (!r.data) {\n                                            callback(this.$t('rules.mobileExist'))\n                                        } else {\n                                            callback()\n                                        }\n                                    })\n                                } else {\n                                    callback()\n                                }\n                            }, trigger: 'blur'\n                        }],\n                    roleId: {required: true, message: this.$t('rules.require'), trigger: 'change'},\n                    sex: {required: true, message: this.$t('rules.require'), trigger: 'change'},\n                    status: {required: true, message: this.$t('rules.require'), trigger: 'blur'}\n                }\n            }\n        },\n        computed: {\n            isVisible: {\n                get() {\n                    return this.dialogVisible\n                },\n                set() {\n                    this.close();\n                    this.reset()\n                }\n            }\n        },\n        mounted() {\n            this.initDepartment();\n            this.initRoles();\n            window.onresize = () => {\n                return (() => {\n                    this.width = this.initWidth()\n                })()\n            }\n        },\n        methods: {\n            initUser() {\n                return {\n                    userId: '',\n                    username: '',\n                    password: '1234qwer',\n                    email: '',\n                    mobile: '',\n                    sex: '',\n                    status: '1',\n                    departmentId: null,\n                    roleId: []\n                }\n            },\n            initWidth() {\n                this.screenWidth = document.body.clientWidth;\n                if (this.screenWidth < 991) {\n                    return '90%'\n                } else if (this.screenWidth < 1400) {\n                    return '45%'\n                } else {\n                    return '800px'\n                }\n            },\n            initDepartment() {\n                this.$get('upms/department/tree').then((r) => {\n                    this.departments = r.data;\n                }).catch((error) => {\n                    console.error(error);\n                    this.$message({\n                        message: this.$t('tips.getDataFail'),\n                        type: 'error'\n                    })\n                })\n            },\n            initRoles() {\n                this.$get('upms/role/options').then((r) => {\n                    this.roles = r.data\n                }).catch((error) => {\n                    console.error(error);\n                    this.$message({\n                        message: this.$t('tips.getDataFail'),\n                        type: 'error'\n                    })\n                })\n            },\n            setUser(val) {\n                this.user = {...val}\n            },\n            close() {\n                this.$emit('close')\n            },\n            submitForm() {\n                this.$refs.form.validate((valid) => {\n                    if (valid) {\n                        this.buttonLoading = true;\n                        if (!this.user.userId) {\n                            // create\n                            let roleIdOld = this.user.roleId;\n                            this.user.roleId = this.user.roleId.join(',');\n                            this.$post('upms/user/create', {...this.user}).then(() => {\n                                this.buttonLoading = false;\n                                this.isVisible = false;\n                                this.$message({\n                                    message: this.$t('tips.createSuccess'),\n                                    type: 'success'\n                                });\n                                this.$emit('success')\n                            }).catch(() => {\n                                this.buttonLoading = false;\n                                this.user.roleId = roleIdOld;\n                            });\n                        } else {\n                            // update\n                            let roleIdOld = this.user.roleId;\n                            this.user.createTime = this.user.modifyTime = this.user.lastLoginTime = null;\n                            this.$put('upms/user/update', {...this.user}).then(() => {\n                                this.buttonLoading = false;\n                                this.isVisible = false;\n                                this.$message({\n                                    message: this.$t('tips.updateSuccess'),\n                                    type: 'success'\n                                });\n                                this.$emit('success')\n                            }).catch(() => {\n                                this.buttonLoading = false;\n                                this.user.roleId = roleIdOld;\n                            });\n                        }\n                    } else {\n                        return false\n                    }\n                })\n            },\n            reset() {\n                // 先清除校验，再清除表单，不然有奇怪的bug\n                this.$refs.form.clearValidate();\n                this.$refs.form.resetFields();\n                this.user = this.initUser()\n            }\n        }\n    }\n</script>\n<style lang=\"scss\" scoped>\n</style>\n"]}]}