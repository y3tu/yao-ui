{"remainingRequest":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/client/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/src/views/model/system/client/Index.vue","mtime":1579413305752},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/babel-loader/lib/index.js","mtime":1578533613779},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1578533679077},{"path":"/Users/yxy/work/y3tu/yao/yao-ui/src/main/webapp/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1578533683571}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport pageMixins from '@/mixins/page'\nimport ClientEdit from './Edit'\n\nexport default {\n    name: 'ClientManage',\n    mixins: [pageMixins],\n    components: {ClientEdit},\n    filters: {\n        approveFilter(status) {\n            const map = {\n                1: 'success',\n                0: 'danger'\n            };\n            return map[status]\n        }\n    },\n    data() {\n        return {\n            dialog: {\n                isVisible: false,\n                title: '',\n                type: ''\n            },\n            tableKey: 0,\n            loading: false,\n            list: null,\n            total: 0,\n            selection: []\n        }\n    },\n    created() {\n        this.$nextTick(() => {\n            this.init()\n        })\n    },\n    methods: {\n        init() {\n            this.page.current = 1;\n            this.findPage();\n        },\n        findPageInit() {\n            this.pageUrl = 'auth/client/page';\n            return true\n        },\n        transApprove(v) {\n            switch (v) {\n                case 0:\n                    return 'false';\n                case 1:\n                    return 'true';\n                default:\n                    return ''\n            }\n        },\n        editSuccess() {\n            this.search()\n        },\n        editClose() {\n            this.dialog.isVisible = false\n        },\n        onSelectChange(selection) {\n            this.selection = selection\n        },\n        add() {\n            this.dialog.title = this.$t('common.add');\n            this.dialog.isVisible = true;\n            this.dialog.type = 'add'\n        },\n        edit(row) {\n            this.$refs.edit.setClient(row);\n            this.dialog.title = this.$t('common.edit');\n            this.dialog.isVisible = true;\n            this.dialog.type = 'edit'\n        },\n        unlock(row) {\n            this.$get(`auth/client/secret/${row.clientId}`).then((r) => {\n                this.$message({\n                    showClose: true,\n                    message: this.$t('tips.clientOriginSecret') + r.data.data,\n                    duration: 0,\n                    type: 'success'\n                })\n            })\n        },\n        batchDelete() {\n            if (!this.selection.length) {\n                this.$message({\n                    message: this.$t('tips.noDataSelected'),\n                    type: 'warning'\n                });\n                return\n            }\n            this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n                confirmButtonText: this.$t('common.confirm'),\n                cancelButtonText: this.$t('common.cancel'),\n                type: 'warning'\n            }).then(() => {\n                const clientIds = [];\n                this.selection.forEach((c) => {\n                    clientIds.push(c.clientId)\n                });\n                this.delete(clientIds)\n            }).catch(() => {\n                this.clearSelections()\n            })\n        },\n        singleDelete(row) {\n            this.$refs.table.toggleRowSelection(row, true);\n            this.batchDelete()\n        },\n        delete(clientIds) {\n            this.loading = true;\n            this.$delete(`auth/client`, {clientIds}).then(() => {\n                this.$message({\n                    message: this.$t('tips.deleteSuccess'),\n                    type: 'success'\n                });\n                this.search()\n            })\n        },\n        clearSelections() {\n            this.$refs.table.clearSelection()\n        },\n        search() {\n\n        },\n        reset() {\n            this.search()\n        }\n    }\n}\n",{"version":3,"sources":["Index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"Index.vue","sourceRoot":"src/views/model/system/client","sourcesContent":["<template>\n    <div class=\"app-container\">\n        <div class=\"filter-container\">\n            <el-input v-model=\"page.entity.clientId\" placeholder=\"clientId\" class=\"filter-item search-item\"/>\n            <el-button class=\"filter-item\" type=\"primary\" plain @click=\"search\">\n                {{ $t('table.search') }}\n            </el-button>\n            <el-button class=\"filter-item\" type=\"warning\" plain @click=\"reset\">\n                {{ $t('table.reset') }}\n            </el-button>\n            <el-dropdown v-has-any-permission=\"['client:add','client:delete']\" trigger=\"click\" class=\"filter-item\">\n                <el-button>\n                    {{ $t('table.more') }}<i class=\"el-icon-arrow-down el-icon--right\"/>\n                </el-button>\n                <el-dropdown-menu slot=\"dropdown\">\n                    <el-dropdown-item v-has-permission=\"['client:add']\" @click.native=\"add\">{{ $t('table.add') }}</el-dropdown-item>\n                    <el-dropdown-item v-has-permission=\"['client:delete']\" @click.native=\"batchDelete\">{{ $t('table.delete') }}</el-dropdown-item>\n                </el-dropdown-menu>\n            </el-dropdown>\n        </div>\n        <el-table\n                ref=\"table\"\n                :key=\"tableKey\"\n                v-loading=\"pageLoading\"\n                :data=\"page.records\"\n                border\n                fit\n                style=\"width: 100%;\"\n                :highlight-current-row=\"true\"\n                @selection-change=\"onSelectChange\">\n            <el-table-column type=\"selection\" align=\"center\" width=\"40px\"/>\n            <el-table-column label=\"clientId\" prop=\"clientId\" :show-overflow-tooltip=\"true\" align=\"center\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.clientId }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column label=\"clientSecret\" prop=\"clientSecret\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"100px\">\n                <template>\n                    <span>******</span>\n                </template>\n            </el-table-column>\n            <el-table-column label=\"scope\" prop=\"scope\" :show-overflow-tooltip=\"true\" align=\"center\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.scope }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column label=\"authorizedGrantTypes\" prop=\"authorizedGrantTypes\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"170px\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.authorizedGrantTypes }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column label=\"accessTokenValidity\" prop=\"accessTokenValidity\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"160px\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.accessTokenValidity }} s</span>\n                </template>\n            </el-table-column>\n            <el-table-column label=\"refreshTokenValidity\" prop=\"refreshTokenValidity\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"160px\">\n                <template slot-scope=\"scope\">\n                    <span>{{ (scope.row.refreshTokenValidity) ? (scope.row.refreshTokenValidity + 's') : '' }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column label=\"webServerRedirectUri\" prop=\"webServerRedirectUri\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"180px\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.webServerRedirectUri }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column label=\"autoapprove\" prop=\"autoapprove\" :show-overflow-tooltip=\"true\" align=\"center\" min-width=\"140px\">\n                <template slot-scope=\"{row}\">\n                    <el-tag v-if=\"row.autoapprove !== null\" :type=\"row.autoapprove | approveFilter\">\n                        {{ transApprove(row.autoapprove) }}\n                    </el-tag>\n                </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('table.operation')\" align=\"center\" min-width=\"150px\" class-name=\"small-padding fixed-width\" fixed=\"right\">\n                <template slot-scope=\"{row}\">\n                    <i v-hasPermission=\"['client:decrypt']\" class=\"el-icon-unlock table-operation\" style=\"color: #87d068;\" @click=\"unlock(row)\"/>\n                    <i v-hasPermission=\"['client:update']\" class=\"el-icon-setting table-operation\" style=\"color: #2db7f5;\" @click=\"edit(row)\"/>\n                    <i v-hasPermission=\"['client:delete']\" class=\"el-icon-delete table-operation\" style=\"color: #f50;\" @click=\"singleDelete(row)\"/>\n                    <el-link v-has-no-permission=\"['client:decrypt','client:update','client:delete']\" class=\"no-perm\">\n                        {{ $t('tips.noPermission') }}\n                    </el-link>\n                </template>\n            </el-table-column>\n        </el-table>\n        <el-pagination\n                :total=\"page.total\"\n                :current-page=\"page.current\"\n                style=\"margin-top: 8px;\"\n                layout=\"total, prev, pager, next, sizes\"\n                @size-change=\"sizeChange\"\n                @current-change=\"pageChange\"/>\n        <client-edit\n                ref=\"edit\"\n                :dialog-visible=\"dialog.isVisible\"\n                :title=\"dialog.title\"\n                :type=\"dialog.type\"\n                @close=\"editClose\"\n                @success=\"editSuccess\"/>\n    </div>\n</template>\n<script>\n    import pageMixins from '@/mixins/page'\n    import ClientEdit from './Edit'\n\n    export default {\n        name: 'ClientManage',\n        mixins: [pageMixins],\n        components: {ClientEdit},\n        filters: {\n            approveFilter(status) {\n                const map = {\n                    1: 'success',\n                    0: 'danger'\n                };\n                return map[status]\n            }\n        },\n        data() {\n            return {\n                dialog: {\n                    isVisible: false,\n                    title: '',\n                    type: ''\n                },\n                tableKey: 0,\n                loading: false,\n                list: null,\n                total: 0,\n                selection: []\n            }\n        },\n        created() {\n            this.$nextTick(() => {\n                this.init()\n            })\n        },\n        methods: {\n            init() {\n                this.page.current = 1;\n                this.findPage();\n            },\n            findPageInit() {\n                this.pageUrl = 'auth/client/page';\n                return true\n            },\n            transApprove(v) {\n                switch (v) {\n                    case 0:\n                        return 'false';\n                    case 1:\n                        return 'true';\n                    default:\n                        return ''\n                }\n            },\n            editSuccess() {\n                this.search()\n            },\n            editClose() {\n                this.dialog.isVisible = false\n            },\n            onSelectChange(selection) {\n                this.selection = selection\n            },\n            add() {\n                this.dialog.title = this.$t('common.add');\n                this.dialog.isVisible = true;\n                this.dialog.type = 'add'\n            },\n            edit(row) {\n                this.$refs.edit.setClient(row);\n                this.dialog.title = this.$t('common.edit');\n                this.dialog.isVisible = true;\n                this.dialog.type = 'edit'\n            },\n            unlock(row) {\n                this.$get(`auth/client/secret/${row.clientId}`).then((r) => {\n                    this.$message({\n                        showClose: true,\n                        message: this.$t('tips.clientOriginSecret') + r.data.data,\n                        duration: 0,\n                        type: 'success'\n                    })\n                })\n            },\n            batchDelete() {\n                if (!this.selection.length) {\n                    this.$message({\n                        message: this.$t('tips.noDataSelected'),\n                        type: 'warning'\n                    });\n                    return\n                }\n                this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n                    confirmButtonText: this.$t('common.confirm'),\n                    cancelButtonText: this.$t('common.cancel'),\n                    type: 'warning'\n                }).then(() => {\n                    const clientIds = [];\n                    this.selection.forEach((c) => {\n                        clientIds.push(c.clientId)\n                    });\n                    this.delete(clientIds)\n                }).catch(() => {\n                    this.clearSelections()\n                })\n            },\n            singleDelete(row) {\n                this.$refs.table.toggleRowSelection(row, true);\n                this.batchDelete()\n            },\n            delete(clientIds) {\n                this.loading = true;\n                this.$delete(`auth/client`, {clientIds}).then(() => {\n                    this.$message({\n                        message: this.$t('tips.deleteSuccess'),\n                        type: 'success'\n                    });\n                    this.search()\n                })\n            },\n            clearSelections() {\n                this.$refs.table.clearSelection()\n            },\n            search() {\n\n            },\n            reset() {\n                this.search()\n            }\n        }\n    }\n</script>\n<style lang=\"scss\" scoped>\n</style>\n"]}]}